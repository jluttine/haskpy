Search.setIndex({"docnames": ["_autosummary/haskpy.optics", "_autosummary/haskpy.optics.adapter", "_autosummary/haskpy.optics.lens", "_autosummary/haskpy.optics.prism", "_autosummary/haskpy.testing", "_autosummary/haskpy.typeclasses", "_autosummary/haskpy.typeclasses.applicative", "_autosummary/haskpy.typeclasses.applicative.Applicative", "_autosummary/haskpy.typeclasses.apply_", "_autosummary/haskpy.typeclasses.apply_.Apply", "_autosummary/haskpy.typeclasses.apply_.apply", "_autosummary/haskpy.typeclasses.apply_.apply_first", "_autosummary/haskpy.typeclasses.apply_.apply_second", "_autosummary/haskpy.typeclasses.apply_.lift2", "_autosummary/haskpy.typeclasses.apply_.lift3", "_autosummary/haskpy.typeclasses.apply_.lift4", "_autosummary/haskpy.typeclasses.apply_.lift5", "_autosummary/haskpy.typeclasses.bifunctor", "_autosummary/haskpy.typeclasses.bifunctor.Bifunctor", "_autosummary/haskpy.typeclasses.bind_", "_autosummary/haskpy.typeclasses.bind_.Bind", "_autosummary/haskpy.typeclasses.bind_.bind", "_autosummary/haskpy.typeclasses.bind_.join", "_autosummary/haskpy.typeclasses.cartesian", "_autosummary/haskpy.typeclasses.cartesian.Cartesian", "_autosummary/haskpy.typeclasses.cocartesian", "_autosummary/haskpy.typeclasses.cocartesian.Cocartesian", "_autosummary/haskpy.typeclasses.contravariant", "_autosummary/haskpy.typeclasses.contravariant.Contravariant", "_autosummary/haskpy.typeclasses.contravariant.contramap", "_autosummary/haskpy.typeclasses.contravariant.contrareplace", "_autosummary/haskpy.typeclasses.equality", "_autosummary/haskpy.typeclasses.equality.Eq", "_autosummary/haskpy.typeclasses.equality.eq", "_autosummary/haskpy.typeclasses.equality.ne", "_autosummary/haskpy.typeclasses.foldable", "_autosummary/haskpy.typeclasses.foldable.Foldable", "_autosummary/haskpy.typeclasses.foldable.elem", "_autosummary/haskpy.typeclasses.foldable.fold", "_autosummary/haskpy.typeclasses.foldable.fold_map", "_autosummary/haskpy.typeclasses.foldable.foldl", "_autosummary/haskpy.typeclasses.foldable.foldr", "_autosummary/haskpy.typeclasses.foldable.foldr_lazy", "_autosummary/haskpy.typeclasses.foldable.length", "_autosummary/haskpy.typeclasses.foldable.null", "_autosummary/haskpy.typeclasses.foldable.sum", "_autosummary/haskpy.typeclasses.functor", "_autosummary/haskpy.typeclasses.functor.Functor", "_autosummary/haskpy.typeclasses.functor.map", "_autosummary/haskpy.typeclasses.functor.replace", "_autosummary/haskpy.typeclasses.hashable", "_autosummary/haskpy.typeclasses.hashable.Hashable", "_autosummary/haskpy.typeclasses.monad", "_autosummary/haskpy.typeclasses.monad.Monad", "_autosummary/haskpy.typeclasses.monoid", "_autosummary/haskpy.typeclasses.monoid.Monoid", "_autosummary/haskpy.typeclasses.ord", "_autosummary/haskpy.typeclasses.ord.Ord", "_autosummary/haskpy.typeclasses.profunctor", "_autosummary/haskpy.typeclasses.profunctor.Profunctor", "_autosummary/haskpy.typeclasses.profunctor.dimap", "_autosummary/haskpy.typeclasses.readable", "_autosummary/haskpy.typeclasses.readable.Read", "_autosummary/haskpy.typeclasses.semigroup", "_autosummary/haskpy.typeclasses.semigroup.Commutative", "_autosummary/haskpy.typeclasses.semigroup.Semigroup", "_autosummary/haskpy.typeclasses.semigroup.append", "_autosummary/haskpy.typeclasses.show", "_autosummary/haskpy.typeclasses.show.Show", "_autosummary/haskpy.typeclasses.traversable", "_autosummary/haskpy.typeclasses.traversable.Traversable", "_autosummary/haskpy.typeclasses.typeclass", "_autosummary/haskpy.typeclasses.typeclass.Type", "_autosummary/haskpy.types", "_autosummary/haskpy.types.compose", "_autosummary/haskpy.types.compose.Compose", "_autosummary/haskpy.types.compose.decompose", "_autosummary/haskpy.types.constant", "_autosummary/haskpy.types.constant.Constant", "_autosummary/haskpy.types.dictionary", "_autosummary/haskpy.types.dictionary.Dictionary", "_autosummary/haskpy.types.dictionary.lookup", "_autosummary/haskpy.types.either", "_autosummary/haskpy.types.either.Either", "_autosummary/haskpy.types.either.Left", "_autosummary/haskpy.types.either.Right", "_autosummary/haskpy.types.either.either", "_autosummary/haskpy.types.either.from_left", "_autosummary/haskpy.types.either.from_right", "_autosummary/haskpy.types.either.is_left", "_autosummary/haskpy.types.either.is_right", "_autosummary/haskpy.types.either.left", "_autosummary/haskpy.types.either.right", "_autosummary/haskpy.types.function", "_autosummary/haskpy.types.function.Function", "_autosummary/haskpy.types.function.FunctionMonoid", "_autosummary/haskpy.types.function.compose", "_autosummary/haskpy.types.function.function", "_autosummary/haskpy.types.identity", "_autosummary/haskpy.types.io", "_autosummary/haskpy.types.io.IO", "_autosummary/haskpy.types.linkedlist", "_autosummary/haskpy.types.linkedlist.Cons", "_autosummary/haskpy.types.linkedlist.LinkedList", "_autosummary/haskpy.types.linkedlist.Nil", "_autosummary/haskpy.types.linkedlist.iterate", "_autosummary/haskpy.types.linkedlist.repeat", "_autosummary/haskpy.types.linkedlist.replicate", "_autosummary/haskpy.types.list", "_autosummary/haskpy.types.list.List", "_autosummary/haskpy.types.maybe", "_autosummary/haskpy.types.maybe.Just", "_autosummary/haskpy.types.maybe.Maybe", "_autosummary/haskpy.types.maybe.MaybeT", "_autosummary/haskpy.types.maybe.Nothing", "_autosummary/haskpy.types.monoids", "_autosummary/haskpy.types.monoids.All", "_autosummary/haskpy.types.monoids.Any", "_autosummary/haskpy.types.monoids.Endo", "_autosummary/haskpy.types.monoids.String", "_autosummary/haskpy.types.monoids.Sum", "_autosummary/haskpy.types.reader", "_autosummary/haskpy.types.reader.Reader", "_autosummary/haskpy.types.reader.ReaderT", "_autosummary/haskpy.types.state", "_autosummary/haskpy.types.state.State", "_autosummary/haskpy.types.state.StateT", "_autosummary/haskpy.types.uncurried", "_autosummary/haskpy.types.uncurried.UncurriedFunction", "_autosummary/haskpy.types.uncurried.UncurriedFunctionMonoid", "_autosummary/haskpy.types.uncurried.uncurried", "_autosummary/haskpy.types.validation", "_autosummary/haskpy.types.validation.Validation", "_autosummary/haskpy.types.writer", "_autosummary/haskpy.types.writer.Writer", "_autosummary/haskpy.types.writer.WriterT", "_autosummary/haskpy.utils", "_autosummary/haskpy.utils.const", "_autosummary/haskpy.utils.identity", "_autosummary/haskpy.utils.match", "api", "changelog", "index", "motivation", "overview"], "filenames": ["_autosummary/haskpy.optics.rst", "_autosummary/haskpy.optics.adapter.rst", "_autosummary/haskpy.optics.lens.rst", "_autosummary/haskpy.optics.prism.rst", "_autosummary/haskpy.testing.rst", "_autosummary/haskpy.typeclasses.rst", "_autosummary/haskpy.typeclasses.applicative.rst", "_autosummary/haskpy.typeclasses.applicative.Applicative.rst", "_autosummary/haskpy.typeclasses.apply_.rst", "_autosummary/haskpy.typeclasses.apply_.Apply.rst", "_autosummary/haskpy.typeclasses.apply_.apply.rst", "_autosummary/haskpy.typeclasses.apply_.apply_first.rst", "_autosummary/haskpy.typeclasses.apply_.apply_second.rst", "_autosummary/haskpy.typeclasses.apply_.lift2.rst", "_autosummary/haskpy.typeclasses.apply_.lift3.rst", "_autosummary/haskpy.typeclasses.apply_.lift4.rst", "_autosummary/haskpy.typeclasses.apply_.lift5.rst", "_autosummary/haskpy.typeclasses.bifunctor.rst", "_autosummary/haskpy.typeclasses.bifunctor.Bifunctor.rst", "_autosummary/haskpy.typeclasses.bind_.rst", "_autosummary/haskpy.typeclasses.bind_.Bind.rst", "_autosummary/haskpy.typeclasses.bind_.bind.rst", "_autosummary/haskpy.typeclasses.bind_.join.rst", "_autosummary/haskpy.typeclasses.cartesian.rst", "_autosummary/haskpy.typeclasses.cartesian.Cartesian.rst", "_autosummary/haskpy.typeclasses.cocartesian.rst", "_autosummary/haskpy.typeclasses.cocartesian.Cocartesian.rst", "_autosummary/haskpy.typeclasses.contravariant.rst", "_autosummary/haskpy.typeclasses.contravariant.Contravariant.rst", "_autosummary/haskpy.typeclasses.contravariant.contramap.rst", "_autosummary/haskpy.typeclasses.contravariant.contrareplace.rst", "_autosummary/haskpy.typeclasses.equality.rst", "_autosummary/haskpy.typeclasses.equality.Eq.rst", "_autosummary/haskpy.typeclasses.equality.eq.rst", "_autosummary/haskpy.typeclasses.equality.ne.rst", "_autosummary/haskpy.typeclasses.foldable.rst", "_autosummary/haskpy.typeclasses.foldable.Foldable.rst", "_autosummary/haskpy.typeclasses.foldable.elem.rst", "_autosummary/haskpy.typeclasses.foldable.fold.rst", "_autosummary/haskpy.typeclasses.foldable.fold_map.rst", "_autosummary/haskpy.typeclasses.foldable.foldl.rst", "_autosummary/haskpy.typeclasses.foldable.foldr.rst", "_autosummary/haskpy.typeclasses.foldable.foldr_lazy.rst", "_autosummary/haskpy.typeclasses.foldable.length.rst", "_autosummary/haskpy.typeclasses.foldable.null.rst", "_autosummary/haskpy.typeclasses.foldable.sum.rst", "_autosummary/haskpy.typeclasses.functor.rst", "_autosummary/haskpy.typeclasses.functor.Functor.rst", "_autosummary/haskpy.typeclasses.functor.map.rst", "_autosummary/haskpy.typeclasses.functor.replace.rst", "_autosummary/haskpy.typeclasses.hashable.rst", "_autosummary/haskpy.typeclasses.hashable.Hashable.rst", "_autosummary/haskpy.typeclasses.monad.rst", "_autosummary/haskpy.typeclasses.monad.Monad.rst", "_autosummary/haskpy.typeclasses.monoid.rst", "_autosummary/haskpy.typeclasses.monoid.Monoid.rst", "_autosummary/haskpy.typeclasses.ord.rst", "_autosummary/haskpy.typeclasses.ord.Ord.rst", "_autosummary/haskpy.typeclasses.profunctor.rst", "_autosummary/haskpy.typeclasses.profunctor.Profunctor.rst", "_autosummary/haskpy.typeclasses.profunctor.dimap.rst", "_autosummary/haskpy.typeclasses.readable.rst", "_autosummary/haskpy.typeclasses.readable.Read.rst", "_autosummary/haskpy.typeclasses.semigroup.rst", "_autosummary/haskpy.typeclasses.semigroup.Commutative.rst", "_autosummary/haskpy.typeclasses.semigroup.Semigroup.rst", "_autosummary/haskpy.typeclasses.semigroup.append.rst", "_autosummary/haskpy.typeclasses.show.rst", "_autosummary/haskpy.typeclasses.show.Show.rst", "_autosummary/haskpy.typeclasses.traversable.rst", "_autosummary/haskpy.typeclasses.traversable.Traversable.rst", "_autosummary/haskpy.typeclasses.typeclass.rst", "_autosummary/haskpy.typeclasses.typeclass.Type.rst", "_autosummary/haskpy.types.rst", "_autosummary/haskpy.types.compose.rst", "_autosummary/haskpy.types.compose.Compose.rst", "_autosummary/haskpy.types.compose.decompose.rst", "_autosummary/haskpy.types.constant.rst", "_autosummary/haskpy.types.constant.Constant.rst", "_autosummary/haskpy.types.dictionary.rst", "_autosummary/haskpy.types.dictionary.Dictionary.rst", "_autosummary/haskpy.types.dictionary.lookup.rst", "_autosummary/haskpy.types.either.rst", "_autosummary/haskpy.types.either.Either.rst", "_autosummary/haskpy.types.either.Left.rst", "_autosummary/haskpy.types.either.Right.rst", "_autosummary/haskpy.types.either.either.rst", "_autosummary/haskpy.types.either.from_left.rst", "_autosummary/haskpy.types.either.from_right.rst", "_autosummary/haskpy.types.either.is_left.rst", "_autosummary/haskpy.types.either.is_right.rst", "_autosummary/haskpy.types.either.left.rst", "_autosummary/haskpy.types.either.right.rst", "_autosummary/haskpy.types.function.rst", "_autosummary/haskpy.types.function.Function.rst", "_autosummary/haskpy.types.function.FunctionMonoid.rst", "_autosummary/haskpy.types.function.compose.rst", "_autosummary/haskpy.types.function.function.rst", "_autosummary/haskpy.types.identity.rst", "_autosummary/haskpy.types.io.rst", "_autosummary/haskpy.types.io.IO.rst", "_autosummary/haskpy.types.linkedlist.rst", "_autosummary/haskpy.types.linkedlist.Cons.rst", "_autosummary/haskpy.types.linkedlist.LinkedList.rst", "_autosummary/haskpy.types.linkedlist.Nil.rst", "_autosummary/haskpy.types.linkedlist.iterate.rst", "_autosummary/haskpy.types.linkedlist.repeat.rst", "_autosummary/haskpy.types.linkedlist.replicate.rst", "_autosummary/haskpy.types.list.rst", "_autosummary/haskpy.types.list.List.rst", "_autosummary/haskpy.types.maybe.rst", "_autosummary/haskpy.types.maybe.Just.rst", "_autosummary/haskpy.types.maybe.Maybe.rst", "_autosummary/haskpy.types.maybe.MaybeT.rst", "_autosummary/haskpy.types.maybe.Nothing.rst", "_autosummary/haskpy.types.monoids.rst", "_autosummary/haskpy.types.monoids.All.rst", "_autosummary/haskpy.types.monoids.Any.rst", "_autosummary/haskpy.types.monoids.Endo.rst", "_autosummary/haskpy.types.monoids.String.rst", "_autosummary/haskpy.types.monoids.Sum.rst", "_autosummary/haskpy.types.reader.rst", "_autosummary/haskpy.types.reader.Reader.rst", "_autosummary/haskpy.types.reader.ReaderT.rst", "_autosummary/haskpy.types.state.rst", "_autosummary/haskpy.types.state.State.rst", "_autosummary/haskpy.types.state.StateT.rst", "_autosummary/haskpy.types.uncurried.rst", "_autosummary/haskpy.types.uncurried.UncurriedFunction.rst", "_autosummary/haskpy.types.uncurried.UncurriedFunctionMonoid.rst", "_autosummary/haskpy.types.uncurried.uncurried.rst", "_autosummary/haskpy.types.validation.rst", "_autosummary/haskpy.types.validation.Validation.rst", "_autosummary/haskpy.types.writer.rst", "_autosummary/haskpy.types.writer.Writer.rst", "_autosummary/haskpy.types.writer.WriterT.rst", "_autosummary/haskpy.utils.rst", "_autosummary/haskpy.utils.const.rst", "_autosummary/haskpy.utils.identity.rst", "_autosummary/haskpy.utils.match.rst", "api.rst", "changelog.rst", "index.rst", "motivation.rst", "overview.rst"], "titles": ["haskpy.optics", "haskpy.optics.adapter", "haskpy.optics.lens", "haskpy.optics.prism", "haskpy.testing", "haskpy.typeclasses", "haskpy.typeclasses.applicative", "Applicative", "haskpy.typeclasses.apply", "Apply", "haskpy.typeclasses.apply_.apply", "haskpy.typeclasses.apply_.apply_first", "haskpy.typeclasses.apply_.apply_second", "haskpy.typeclasses.apply_.lift2", "haskpy.typeclasses.apply_.lift3", "haskpy.typeclasses.apply_.lift4", "haskpy.typeclasses.apply_.lift5", "haskpy.typeclasses.bifunctor", "Bifunctor", "haskpy.typeclasses.bind", "Bind", "haskpy.typeclasses.bind_.bind", "haskpy.typeclasses.bind_.join", "haskpy.typeclasses.cartesian", "Cartesian", "haskpy.typeclasses.cocartesian", "Cocartesian", "haskpy.typeclasses.contravariant", "Contravariant", "haskpy.typeclasses.contravariant.contramap", "haskpy.typeclasses.contravariant.contrareplace", "haskpy.typeclasses.equality", "Eq", "haskpy.typeclasses.equality.eq", "haskpy.typeclasses.equality.ne", "haskpy.typeclasses.foldable", "Foldable", "haskpy.typeclasses.foldable.elem", "haskpy.typeclasses.foldable.fold", "haskpy.typeclasses.foldable.fold_map", "haskpy.typeclasses.foldable.foldl", "haskpy.typeclasses.foldable.foldr", "haskpy.typeclasses.foldable.foldr_lazy", "haskpy.typeclasses.foldable.length", "haskpy.typeclasses.foldable.null", "haskpy.typeclasses.foldable.sum", "haskpy.typeclasses.functor", "Functor", "haskpy.typeclasses.functor.map", "haskpy.typeclasses.functor.replace", "haskpy.typeclasses.hashable", "Hashable", "haskpy.typeclasses.monad", "Monad", "haskpy.typeclasses.monoid", "Monoid", "haskpy.typeclasses.ord", "Ord", "haskpy.typeclasses.profunctor", "Profunctor", "haskpy.typeclasses.profunctor.dimap", "haskpy.typeclasses.readable", "Read", "haskpy.typeclasses.semigroup", "Commutative", "Semigroup", "haskpy.typeclasses.semigroup.append", "haskpy.typeclasses.show", "Show", "haskpy.typeclasses.traversable", "Traversable", "haskpy.typeclasses.typeclass", "Type", "haskpy.types", "haskpy.types.compose", "haskpy.types.compose.Compose", "haskpy.types.compose.decompose", "haskpy.types.constant", "Constant", "haskpy.types.dictionary", "Dictionary", "haskpy.types.dictionary.lookup", "haskpy.types.either", "Either", "haskpy.types.either.Left", "haskpy.types.either.Right", "haskpy.types.either.either", "haskpy.types.either.from_left", "haskpy.types.either.from_right", "haskpy.types.either.is_left", "haskpy.types.either.is_right", "haskpy.types.either.left", "haskpy.types.either.right", "haskpy.types.function", "Function", "haskpy.types.function.FunctionMonoid", "haskpy.types.function.compose", "haskpy.types.function.function", "haskpy.types.identity", "haskpy.types.io", "IO", "haskpy.types.linkedlist", "haskpy.types.linkedlist.Cons", "LinkedList", "haskpy.types.linkedlist.Nil", "haskpy.types.linkedlist.iterate", "haskpy.types.linkedlist.repeat", "haskpy.types.linkedlist.replicate", "haskpy.types.list", "List", "haskpy.types.maybe", "haskpy.types.maybe.Just", "Maybe", "haskpy.types.maybe.MaybeT", "haskpy.types.maybe.Nothing", "haskpy.types.monoids", "All", "Any", "Endo", "String", "Sum", "haskpy.types.reader", "Reader", "haskpy.types.reader.ReaderT", "haskpy.types.state", "State", "haskpy.types.state.StateT", "haskpy.types.uncurried", "UncurriedFunction", "haskpy.types.uncurried.UncurriedFunctionMonoid", "haskpy.types.uncurried.uncurried", "haskpy.types.validation", "Validation", "haskpy.types.writer", "Writer", "haskpy.types.writer.WriterT", "haskpy.utils", "haskpy.utils.const", "haskpy.utils.identity", "haskpy.utils.match", "API", "Changelog", "HaskPy documentation", "Motivation", "Overview"], "terms": {"profunctor": [0, 1, 24, 26, 141, 142], "travers": [0, 5, 36, 80, 103, 109, 112, 141], "grate": 0, "affin": 0, "setter": 0, "resourc": 0, "modular": 0, "data": [0, 24, 26, 36, 70, 80, 83, 94, 103, 109, 110, 112, 118, 128, 142], "accessor": 0, "picker": 0, "gibbon": 0, "wu": 0, "The": [0, 5, 7, 8, 9, 20, 24, 26, 32, 36, 38, 39, 42, 47, 51, 53, 59, 70, 80, 83, 94, 103, 104, 109, 112, 116, 117, 119, 120, 128, 130, 142, 144], "categor": 0, "view": [0, 2], "bartosz": 0, "milewski": 0, "http": [0, 7, 24, 26, 80, 94, 128], "github": [0, 141, 144], "com": [0, 94, 128], "cmk": 0, "extra": 0, "tree": 0, "master": 0, "hablapp": 0, "dontfeartheprofunctoropt": 0, "oleg": 0, "fi": 0, "gist": 0, "imag": 0, "hierarchi": [0, 141], "svg": 0, "receiv": 1, "send": 1, "sourc": [1, 2, 3, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 22, 24, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 53, 57, 59, 60, 62, 65, 66, 68, 70, 72, 75, 76, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 96, 97, 100, 102, 103, 105, 106, 107, 109, 111, 112, 113, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 129, 130, 132, 134, 135, 137, 138, 139, 144], "": [1, 2, 3, 7, 9, 20, 24, 26, 36, 42, 47, 51, 53, 55, 59, 64, 65, 70, 75, 80, 83, 91, 92, 94, 103, 109, 112, 116, 117, 118, 119, 120, 128, 141, 144], "b": [1, 2, 3, 7, 9, 10, 11, 12, 13, 14, 15, 16, 20, 24, 26, 28, 29, 30, 36, 40, 41, 42, 47, 48, 53, 59, 60, 70, 73, 80, 83, 86, 91, 92, 94, 103, 109, 112, 128, 137, 144], "t": [1, 2, 3, 5, 7, 9, 20, 24, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 51, 53, 59, 64, 70, 75, 80, 83, 91, 92, 94, 103, 104, 109, 112, 116, 117, 119, 120, 128, 130, 141, 144], "adapterp": 1, "where": [1, 2, 3, 7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 144], "type": [1, 2, 3, 5, 20, 28, 31, 32, 36, 42, 46, 47, 50, 53, 65, 78, 80, 83, 94, 100, 103, 109, 112, 116, 117, 118, 119, 120, 122, 125, 128, 132, 134, 141, 142], "p": [1, 2, 3, 24, 26, 59, 60, 91, 92], "updat": [2, 80, 103], "lensp": 2, "cartesian": [2, 94, 141], "match": [3, 83, 103, 112, 144], "build": 3, "either": [3, 5, 7, 9, 20, 24, 26, 36, 47, 53, 59, 70, 80, 94, 103, 109, 112, 128, 141, 144], "prismp": [3, 91, 92], "cocartesian": [3, 91, 92, 94, 141], "defin": [5, 36, 53, 73, 83, 112, 144], "properti": [5, 47, 55, 64, 65, 72, 73, 94, 128, 141, 142], "mai": [5, 36, 42, 70, 112], "have": [5, 7, 9, 20, 24, 26, 42, 47, 51, 53, 59, 70, 72, 73, 75, 80, 83, 94, 103, 109, 112, 116, 117, 119, 120, 128, 130, 144], "i": [5, 7, 8, 9, 20, 24, 26, 36, 38, 39, 42, 47, 51, 53, 55, 59, 64, 65, 70, 75, 80, 83, 91, 92, 94, 102, 103, 109, 112, 116, 117, 118, 119, 120, 128, 130, 142, 144], "term": [5, 36, 70, 112], "us": [5, 7, 9, 20, 24, 26, 32, 33, 36, 42, 47, 51, 53, 55, 59, 64, 65, 70, 80, 83, 94, 103, 104, 109, 112, 116, 117, 118, 119, 120, 128, 130, 141, 142, 144], "haskel": [5, 7, 9, 20, 24, 26, 36, 42, 47, 53, 59, 70, 75, 80, 83, 94, 103, 109, 112, 128, 140, 142, 144], "could": [5, 36, 144], "roughli": 5, "translat": [5, 7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128], "interfac": [5, 94, 128, 144], "object": [5, 18, 51, 57, 62, 68, 72, 75, 78, 80, 83, 94, 100, 103, 104, 112, 116, 117, 118, 119, 120, 122, 125, 132, 134, 141, 144], "orient": 5, "program": [5, 7, 142, 144], "languag": 5, "each": [5, 70, 80, 103, 104, 109, 112, 144], "some": [5, 7, 9, 20, 42, 51, 53, 72, 75, 80, 83, 94, 103, 109, 112, 116, 117, 119, 120, 128, 141, 144], "can": [5, 7, 9, 20, 24, 26, 32, 33, 35, 36, 38, 39, 42, 46, 47, 51, 53, 59, 69, 70, 75, 80, 83, 94, 103, 104, 109, 112, 116, 117, 119, 120, 128, 130, 141, 144], "instanc": [5, 9, 36, 42, 70, 75, 80, 94, 95, 103, 104, 112, 128, 129, 130, 141, 144], "valu": [5, 7, 9, 20, 36, 38, 39, 42, 53, 55, 64, 65, 70, 72, 73, 75, 80, 82, 83, 94, 101, 103, 104, 108, 109, 110, 112, 116, 117, 118, 119, 120, 128, 130, 144], "compar": 5, "equal": [5, 32, 51, 94], "e": [5, 16, 36, 37, 42, 70, 80, 86, 87, 88, 103, 109, 112, 144], "eq": [5, 34, 37, 51, 80, 83, 103, 109, 112, 116, 117, 119, 120, 141], "multipl": [5, 7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 144], "when": [5, 42, 72, 75, 112, 144], "implement": [5, 7, 9, 20, 32, 36, 42, 51, 53, 70, 75, 80, 83, 94, 103, 109, 112, 116, 117, 119, 120, 128, 144], "an": [5, 7, 9, 20, 36, 42, 53, 70, 80, 83, 94, 103, 104, 109, 112, 128, 144], "said": [5, 36], "terminologi": 5, "In": [5, 20, 36, 47, 53, 72, 83, 103, 112, 141, 144], "ar": [5, 7, 9, 20, 24, 26, 36, 47, 51, 52, 53, 55, 59, 64, 65, 70, 72, 75, 80, 83, 94, 103, 109, 112, 116, 117, 118, 119, 120, 127, 128, 141, 142, 144], "base": [5, 7, 9, 18, 20, 24, 26, 28, 32, 36, 47, 51, 53, 55, 57, 59, 62, 64, 65, 68, 70, 72, 75, 78, 80, 83, 94, 100, 103, 109, 112, 116, 117, 118, 119, 120, 122, 125, 128, 132, 134, 141, 142], "class": [5, 7, 9, 18, 20, 24, 26, 28, 32, 36, 38, 39, 47, 51, 53, 55, 57, 59, 62, 64, 65, 68, 70, 72, 75, 78, 80, 83, 94, 100, 103, 109, 112, 116, 117, 118, 119, 120, 122, 125, 128, 132, 134, 141, 144], "inherit": [5, 144], "so": [5, 7, 9, 20, 24, 26, 33, 36, 38, 39, 47, 51, 53, 59, 70, 75, 80, 83, 94, 103, 109, 112, 116, 117, 119, 120, 128, 130, 141, 144], "also": [5, 7, 9, 20, 24, 26, 36, 42, 47, 53, 59, 70, 75, 80, 83, 94, 103, 104, 109, 112, 128, 144], "thei": [5, 7, 9, 20, 24, 26, 47, 51, 53, 59, 70, 75, 80, 83, 94, 103, 109, 112, 116, 117, 119, 120, 128, 141, 144], "aren": 5, "subclass": [5, 51, 144], "python": [5, 33, 36, 42, 51, 55, 64, 65, 70, 80, 83, 94, 103, 104, 109, 112, 116, 117, 118, 119, 120, 127, 128, 141, 142, 144], "howev": [5, 112, 144], "we": [5, 7, 9, 20, 36, 42, 53, 70, 75, 80, 83, 94, 103, 109, 112, 128, 141, 144], "haskellish": 5, "sai": [5, 112], "although": 5, "method": [5, 7, 28, 36, 51, 64, 70, 75, 80, 83, 94, 103, 109, 112, 116, 117, 119, 120, 128, 130, 141, 144], "attribut": [5, 94, 144], "must": [5, 38, 39, 94, 128], "For": [5, 9, 42, 47, 55, 64, 65, 70, 75, 80, 103, 104, 109, 112, 130, 144], "__eq__": [5, 32, 51, 80, 83, 103, 109, 112, 116, 117, 119, 120, 141], "__ne__": [5, 32, 51, 80, 83, 103, 109, 112, 116, 117, 119, 120], "tell": [5, 20, 53, 83, 94, 103, 109, 112, 128], "how": [5, 42, 75, 103, 144], "two": [5, 7, 9, 20, 24, 26, 47, 53, 55, 59, 64, 65, 70, 74, 75, 80, 82, 83, 94, 103, 109, 112, 116, 117, 118, 119, 120, 128, 144], "default": [5, 7, 9, 20, 32, 36, 51, 53, 55, 64, 65, 70, 80, 83, 94, 103, 109, 112, 116, 117, 118, 119, 120, 128], "what": [5, 55, 64, 65, 80, 94, 103, 109, 112, 116, 117, 118, 119, 120, 128, 144], "minimum": 5, "complet": [5, 7, 9, 20, 24, 26, 28, 32, 36, 47, 51, 53, 55, 59, 64, 65, 70, 72, 141, 144], "definit": [5, 7, 9, 20, 24, 26, 28, 32, 36, 47, 51, 53, 55, 59, 64, 65, 70, 72, 103, 104, 144], "parametr": 5, "polymorph": [5, 144], "mean": [5, 94, 112, 128, 144], "ani": [5, 36, 42, 51, 64, 80, 83, 94, 112, 116, 119, 120, 128, 144], "function": [5, 7, 8, 9, 20, 24, 26, 33, 36, 42, 47, 53, 59, 70, 75, 80, 83, 102, 103, 109, 112, 118, 127, 128, 129, 130, 136, 141, 142], "take": [5, 7, 9, 20, 42, 53, 75, 80, 83, 94, 103, 109, 112, 128, 144], "argument": [5, 36, 38, 39, 42, 70, 72, 75, 94, 103, 109, 112, 128, 141, 144], "But": [5, 33, 36, 103, 104, 112, 144], "becaus": [5, 7, 9, 20, 24, 26, 36, 42, 47, 53, 55, 59, 64, 65, 70, 75, 80, 83, 94, 103, 104, 109, 112, 116, 117, 118, 119, 120, 128, 144], "should": [5, 36, 42, 94], "depend": [5, 53, 83, 103, 104, 112, 144], "thi": [5, 7, 9, 20, 33, 36, 42, 51, 53, 64, 70, 75, 80, 83, 94, 103, 104, 109, 112, 116, 117, 119, 120, 128, 130, 141, 144], "achiev": [5, 42, 144], "wai": [5, 36, 51, 70, 75, 80, 83, 94, 112, 116, 117, 119, 120, 128, 141, 144], "call": [5, 42, 94, 103, 104, 128, 144], "first": [5, 7, 9, 20, 24, 38, 39, 42, 53, 80, 83, 94, 103, 109, 112, 128, 141, 144], "That": [5, 20, 53, 75, 83, 94, 103, 109, 112, 128, 144], "gener": [5, 42, 80, 91, 92, 109, 144], "provid": [5, 36, 53, 70, 80, 83, 103, 109, 112, 142, 144], "find": 5, "correct": 5, "easili": [5, 103, 130, 144], "Then": [5, 36, 70, 112], "top": 5, "level": [5, 7, 9, 20, 24, 26, 47, 53, 59, 70, 75, 80, 83, 94, 103, 109, 112, 128], "act": 5, "thin": 5, "wrapper": [5, 51, 75, 80, 83, 112, 116, 117, 119, 120], "over": [5, 46, 94, 144], "map": [5, 7, 9, 20, 24, 26, 33, 36, 42, 46, 47, 53, 59, 70, 80, 83, 94, 103, 104, 109, 112, 128, 130, 144], "functor": [5, 7, 9, 20, 23, 24, 25, 26, 27, 28, 36, 53, 59, 70, 74, 80, 83, 94, 103, 109, 112, 128, 141], "second": [5, 7, 9, 20, 24, 26, 42, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128], "bind": [5, 53, 83, 94, 103, 109, 112, 128, 141, 144], "monad": [5, 83, 94, 97, 103, 109, 110, 112, 128, 130, 141, 142], "law": [5, 20, 47, 53, 64, 141], "syntax": [5, 73], "bool": [5, 32, 33, 34, 36, 37, 44, 51, 70, 80, 83, 103, 109, 112, 116, 117, 119, 120], "basic": [5, 144], "contain": [5, 7, 9, 20, 53, 80, 83, 94, 103, 109, 112, 128, 144], "like": [5, 112, 128, 130, 144], "merg": [5, 75, 144], "strutur": [5, 35], "manipul": 5, "abstract": [5, 72], "read": [5, 144], "more": [5, 7, 9, 20, 53, 75, 80, 83, 91, 92, 94, 103, 104, 109, 112, 128, 144], "typeclassopedia": 5, "haskpi": [7, 9, 18, 20, 24, 26, 28, 32, 36, 47, 51, 53, 55, 57, 59, 62, 64, 65, 68, 70, 72, 78, 80, 83, 94, 100, 103, 109, 112, 116, 117, 118, 119, 120, 122, 125, 128, 132, 134, 144], "typeclass": [7, 9, 18, 20, 24, 26, 28, 32, 36, 47, 51, 53, 55, 57, 59, 62, 64, 65, 68, 70, 72, 103, 141, 142], "appli": [7, 11, 12, 13, 20, 33, 36, 53, 70, 80, 83, 94, 103, 109, 112, 128, 141, 144], "minim": [7, 9, 20, 24, 26, 28, 32, 36, 47, 51, 53, 55, 59, 64, 65, 70, 72], "pure": [7, 53, 75, 83, 94, 103, 109, 112, 128], "apply_to": [7, 9, 20, 53, 80, 83, 94, 103, 109, 112, 128], "requir": [7, 94, 128, 144], "given": [7, 38, 39, 144], "you": [7, 36, 42, 51, 70, 80, 83, 94, 103, 104, 109, 112, 116, 117, 119, 120, 128, 130, 144], "don": [7, 51, 80, 83, 112, 116, 117, 119, 120, 144], "need": [7, 9, 36, 53, 75, 80, 83, 94, 112, 128, 141, 144], "refer": [7, 9, 36, 70, 80, 112, 142, 144], "c": [7, 13, 14, 15, 16, 24, 26, 59, 60, 86, 94, 103, 128, 144], "mcbride": 7, "r": 7, "paterson": 7, "effect": [7, 69, 70, 94], "journal": 7, "volum": 7, "18": 7, "issu": 7, "1": [7, 33, 42, 103, 104, 112, 142, 144], "januari": 7, "2008": 7, "pp": 7, "13": 7, "doi": 7, "org": [7, 24, 26, 80], "10": [7, 130, 144], "1017": 7, "s0956796807006326": 7, "wiki": 7, "hackag": [7, 24, 26], "__lshift__": [7, 9, 20, 53, 80, 83, 94, 103, 109, 112, 128], "x": [7, 9, 10, 11, 12, 20, 21, 22, 24, 26, 28, 29, 30, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 53, 55, 59, 60, 64, 65, 66, 70, 75, 76, 80, 83, 84, 85, 87, 88, 94, 102, 103, 104, 105, 106, 107, 109, 111, 112, 116, 117, 120, 128, 130, 137, 138, 144], "sequenc": [7, 9, 20, 53, 70, 80, 83, 94, 103, 109, 112, 128, 130, 141, 144], "similarli": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 144], "__matmul__": [7, 9, 20, 53, 80, 83, 94, 103, 109, 112, 128, 144], "operand": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128], "f": [7, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 24, 26, 28, 29, 30, 36, 39, 42, 47, 48, 53, 59, 60, 70, 75, 80, 83, 86, 94, 96, 97, 103, 105, 109, 112, 118, 128, 130, 144], "why": [7, 9, 20, 24, 26, 47, 53, 59, 70, 75, 80, 83, 94, 103, 109, 112, 128, 144], "oper": [7, 9, 20, 24, 26, 32, 33, 47, 51, 53, 55, 59, 64, 65, 70, 80, 83, 94, 103, 109, 112, 116, 117, 118, 119, 120, 128, 141, 142], "It": [7, 9, 20, 24, 26, 36, 38, 39, 42, 47, 53, 59, 64, 70, 75, 80, 83, 94, 103, 109, 112, 128, 144], "typic": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 144], "often": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128], "other": [7, 9, 20, 32, 36, 42, 51, 53, 55, 64, 65, 70, 80, 83, 94, 103, 109, 112, 116, 117, 118, 119, 120, 128, 130, 141, 144], "common": [7, 9, 20, 53, 80, 83, 94, 103, 109, 112, 128, 144], "less": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128], "risk": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128], "confus": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 144], "commut": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 116, 117, 120, 128, 141], "isn": [7, 9, 20, 24, 26, 36, 42, 47, 53, 59, 70, 75, 80, 83, 94, 103, 109, 112, 128, 144], "If": [7, 9, 20, 36, 53, 80, 83, 94, 103, 109, 112, 128, 144], "see": [7, 9, 20, 36, 42, 53, 70, 75, 80, 83, 94, 103, 109, 112, 128, 144], "matrix": [7, 9, 20, 53, 80, 83, 94, 103, 109, 112, 128], "structur": [7, 9, 20, 24, 26, 38, 39, 42, 47, 53, 59, 69, 70, 75, 80, 83, 94, 103, 109, 112, 128, 144], "both": [7, 9, 20, 36, 53, 75, 80, 83, 94, 103, 109, 112, 128, 144], "left": [7, 9, 20, 24, 26, 42, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128], "right": [7, 9, 20, 24, 26, 36, 42, 47, 53, 59, 70, 75, 80, 83, 94, 103, 109, 112, 128], "insid": [7, 9, 20, 24, 26, 36, 38, 39, 42, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 130, 144], "give": [7, 9, 20, 53, 80, 83, 94, 103, 109, 112, 128, 144], "result": [7, 9, 20, 53, 69, 70, 75, 80, 83, 94, 103, 109, 112, 128, 144], "doe": [7, 9, 20, 53, 80, 83, 94, 103, 109, 112, 128, 144], "similar": [7, 9, 20, 42, 53, 72, 80, 83, 94, 103, 109, 112, 127, 128], "evalu": [7, 9, 20, 42, 53, 80, 83, 94, 103, 109, 112, 128], "thu": [7, 9, 20, 36, 53, 70, 80, 83, 94, 103, 109, 112, 128], "make": [7, 9, 20, 42, 53, 75, 80, 83, 94, 103, 104, 109, 112, 128, 141, 144], "perfect": [7, 9, 20, 53, 80, 83, 94, 103, 109, 112, 128], "sens": [7, 9, 20, 53, 80, 83, 94, 103, 109, 112, 128, 144], "__rpow__": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 144], "lift": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 144], "addit": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 144], "veri": [7, 9, 20, 24, 26, 36, 42, 47, 53, 59, 70, 80, 83, 94, 103, 104, 109, 112, 128, 144], "differ": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 144], "role": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128], "same": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 144], "higher": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128], "kind": [7, 9, 20, 24, 26, 42, 47, 53, 59, 70, 75, 80, 83, 94, 103, 104, 109, 112, 128, 144], "rais": [7, 9, 20, 24, 26, 36, 47, 51, 53, 59, 70, 80, 83, 94, 103, 109, 112, 116, 117, 119, 120, 128], "power": [7, 9, 20, 24, 26, 42, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 144], "functori": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 144], "composit": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 141, 144], "just": [7, 9, 20, 24, 26, 36, 42, 47, 51, 53, 59, 70, 72, 75, 80, 83, 94, 103, 109, 112, 116, 117, 119, 120, 128, 130, 144], "visual": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128], "symbol": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128], "seen": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 144], "chain": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128], "star": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128], "__rshift__": [7, 9, 20, 53, 80, 83, 94, 103, 109, 112, 128, 144], "m": [7, 9, 20, 36, 38, 39, 53, 55, 64, 65, 66, 70, 80, 83, 89, 90, 94, 103, 109, 112, 113, 116, 117, 118, 119, 120, 128], "apply_first": [7, 9, 20, 53, 80, 83, 94, 103, 109, 112, 128, 141], "combin": [7, 9, 20, 36, 40, 41, 42, 53, 70, 80, 83, 94, 103, 109, 112, 128, 144], "action": [7, 9, 20, 53, 70, 80, 83, 94, 103, 109, 112, 128], "keep": [7, 9, 20, 53, 80, 83, 94, 103, 109, 112, 128], "onli": [7, 9, 20, 36, 42, 53, 64, 70, 80, 83, 94, 103, 109, 112, 128, 141, 144], "apply_second": [7, 9, 20, 53, 80, 83, 94, 103, 109, 112, 128, 141], "flap": [7, 9, 20, 24, 26, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128, 141], "self": [7, 20, 53, 83, 94, 103, 109, 112, 128, 144], "replac": [7, 9, 20, 24, 26, 36, 47, 53, 59, 70, 80, 83, 94, 103, 109, 112, 128], "name": [8, 24, 26, 42, 142], "modul": [8, 142, 144], "apply_": [8, 9, 144], "instead": [8, 33, 36, 59, 70, 80, 103, 109, 112], "order": [8, 20, 53, 83, 94, 103, 112, 128, 141], "avoid": [8, 144], "clash": 8, "applic": [9, 20, 47, 53, 70, 74, 75, 80, 83, 94, 103, 109, 112, 128, 141], "semigroup": [9, 55, 64, 80, 94, 128, 141, 144], "monoid": [9, 36, 38, 39, 64, 65, 70, 80, 94, 95, 103, 109, 112, 116, 117, 118, 119, 120, 128, 129, 141], "do": [9, 55, 64, 65, 75, 80, 94, 103, 109, 111, 112, 116, 117, 118, 119, 120, 128, 141], "dictionari": [9, 141, 144], "purescript": [9, 51, 80], "pursuit": [9, 80], "y": [11, 12, 33, 34, 66, 75, 103, 104, 112, 137, 144], "d": [15, 16, 24, 26, 59, 60, 81, 94, 103, 112], "todo": [17, 18, 56, 57, 61, 62, 67, 68, 77, 78, 99, 100, 121, 122, 123, 124, 125, 126, 131, 132, 133, 134, 135], "bind_": [20, 144], "extend": 20, "join": [20, 53, 83, 94, 103, 109, 112, 128], "associ": [20, 36, 42, 70, 103, 112], "g": [20, 24, 26, 36, 42, 47, 53, 59, 60, 70, 80, 83, 86, 94, 96, 103, 109, 112, 128, 144], "lambda": [20, 42, 94, 102, 103, 104, 112, 130, 144], "k": [20, 80], "__mod__": [20, 53, 83, 94, 103, 109, 112, 128, 144], "equival": [20, 36, 53, 70, 83, 94, 103, 109, 112, 128], "ha": [20, 53, 83, 94, 95, 103, 109, 112, 128, 129, 144], "unit": [20, 53, 83, 94, 103, 109, 112, 128], "while": [20, 53, 83, 94, 103, 104, 109, 112, 128, 141], "work": [20, 36, 53, 70, 83, 94, 103, 104, 109, 112, 128], "line": [20, 53, 83, 94, 103, 109, 112, 128], "circl": [20, 53, 83, 94, 103, 109, 112, 128], "hand": [20, 53, 83, 94, 103, 109, 112, 128], "about": [20, 53, 83, 94, 103, 109, 112, 128, 144], "side": [20, 42, 53, 83, 94, 103, 109, 112, 128], "those": [20, 36, 51, 53, 70, 75, 80, 83, 94, 103, 109, 112, 116, 117, 119, 120, 128, 141, 144], "let": [20, 36, 42, 53, 59, 70, 80, 83, 103, 109, 112, 144], "write": [20, 36, 53, 70, 75, 80, 83, 103, 109, 112, 144], "its": [20, 53, 75, 83, 103, 112, 144], "follow": [20, 53, 64, 83, 94, 103, 104, 112, 144], "simpl": [20, 42, 53, 83, 103, 104, 112, 115, 141, 144], "helper": [20, 53, 83, 103, 112], "h": [20, 53, 83, 94, 103, 112], "now": [20, 42, 53, 83, 103, 112], "ident": [20, 36, 47, 53, 55, 70, 83, 94, 103, 109, 112, 128, 141, 144], "perhap": [24, 26], "better": [24, 26, 42], "known": [24, 26, 94, 128], "strong": 24, "packag": [24, 26, 80, 144], "5": [24, 26, 103, 104], "2": [24, 26, 33, 42, 80, 94, 103, 104, 112, 142, 144], "doc": [24, 26, 80], "html": [24, 26], "decid": [24, 26, 75, 144], "wa": [24, 26, 112], "optic": [24, 26, 141, 142], "paper": [24, 26], "contramap": [24, 26, 28, 59, 94], "contrareplac": [24, 26, 28, 59, 94], "dimap": [24, 26, 59, 94], "choic": [26, 144], "inequ": [31, 32, 34, 51, 80, 83, 103, 109, 112, 116, 117, 119, 120], "comparison": [32, 51, 75, 80, 83, 103, 109, 112, 116, 117, 119, 120], "sample_typ": [32, 72], "constructor": [32, 36, 70, 72, 75, 110, 112, 130, 141, 144], "__eq_generic__": 32, "__eq_test__": [32, 80, 83, 94, 103, 109, 112, 118, 128], "sample_eq_typ": 32, "__hash__": [32, 51, 80, 83, 103, 109, 112, 116, 117, 119, 120, 141], "none": [32, 80, 83, 103, 109, 112, 144], "note": [33, 36, 42, 51, 75, 80, 83, 94, 103, 104, 112, 116, 117, 119, 120, 128, 144], "one": [33, 36, 51, 74, 75, 80, 83, 94, 103, 104, 112, 116, 117, 119, 120, 128, 130, 141, 144], "cannot": [33, 42, 51, 80, 83, 103, 112, 116, 117, 119, 120, 128, 144], "partial": [33, 128, 144], "usecas": [33, 144], "from": [33, 36, 42, 70, 103, 104, 112, 130, 144], "import": [33, 42, 94, 103, 112, 130, 144], "list": [33, 36, 42, 51, 55, 64, 65, 70, 80, 83, 94, 101, 103, 104, 112, 116, 117, 118, 119, 120, 128, 130, 141], "42": [33, 103, 104, 112, 144], "666": [33, 112, 144], "fals": [33, 42, 117, 144], "true": [33, 42, 116, 144], "squash": [35, 144], "strictli": 36, "fold_map": [36, 70, 80, 103, 109, 112, 144], "foldl": [36, 42, 70, 80, 103, 109, 112, 144], "foldr": [36, 42, 70, 80, 103, 109, 112, 144], "recommend": [36, 70, 112, 144], "to_it": [36, 70, 80, 103, 109, 112], "length": [36, 70, 80, 103, 109, 112], "perform": [36, 70, 112], "warn": 36, "strongli": [36, 70, 112], "won": [36, 51, 80, 83, 112, 116, 117, 119, 120], "scale": [36, 70, 112], "up": [36, 51, 70, 80, 83, 112, 116, 117, 119, 120, 144], "mani": [36, 42, 51, 70, 80, 83, 103, 109, 112, 116, 117, 119, 120, 128, 144], "reli": 36, "slow": 36, "sequenti": 36, "parallel": [36, 70, 103, 109, 112], "circular": [36, 53, 83, 112], "fashion": 36, "which": [36, 75, 94, 103, 112, 142, 144], "least": [36, 94], "exampl": [36, 42, 47, 94, 103, 130], "set": [36, 144], "__contains__": [36, 70, 80, 103, 109, 112], "overrid": [36, 51, 70, 80, 83, 103, 109, 112, 116, 117, 119, 120], "elem": [36, 70, 80, 103, 109, 112], "want": [36, 70, 75, 80, 103, 109, 112], "chang": [36, 70, 80, 103, 109, 112], "__iter__": [36, 70, 80, 103, 109, 112], "__len__": [36, 70, 80, 103, 109, 112], "fold": [36, 42, 70, 80, 103, 109, 112, 144], "fold2": [36, 70, 80, 103, 109, 112], "ignor": [36, 70, 103, 109, 112], "recurs": [36, 42, 70, 103, 104, 109, 112, 142], "all": [36, 70, 72, 94, 103, 104, 109, 112, 128, 144], "possibl": [36, 42, 51, 70, 75, 80, 82, 83, 103, 104, 109, 112, 116, 117, 119, 120, 144], "lost": [36, 70, 103, 109, 112], "determin": [36, 70, 103, 109, 112], "initi": [36, 40, 41, 42, 70, 80, 103, 109, 112], "doesn": [36, 42, 64, 70, 75, 103, 104, 112, 128, 130, 141], "well": [36, 70, 112], "intuit": [36, 70, 112], "loop": [36, 70, 103, 112], "never": [36, 70, 112], "infinit": [36, 42, 70, 80, 103, 104, 109, 112, 144], "toni": [36, 70, 112], "morri": [36, 70, 112], "poor": [36, 70, 112], "util": [36, 70, 112, 140, 141, 142, 144], "endo": [36, 70, 112, 141], "empti": [36, 38, 39, 55, 70, 80, 94, 103, 109, 112, 116, 117, 118, 119, 120, 128, 144], "append": [36, 55, 64, 65, 70, 80, 94, 103, 109, 112, 116, 117, 118, 119, 120, 128, 144], "One": [36, 51, 70, 80, 83, 103, 104, 112, 116, 117, 119, 120, 128, 144], "transform": [36, 42, 70, 75, 97, 110, 112, 130, 141, 142], "endofunct": [36, 70, 112, 118], "compos": [36, 47, 70, 94, 112, 128, 141, 142], "singl": [36, 70, 75, 112, 128, 144], "final": [36, 70, 112, 144], "calcul": [36, 70, 103, 112, 144], "otherwis": [36, 70, 112], "couldn": [36, 70, 112], "head": [36, 70, 80, 103, 109, 112], "return": [36, 42, 70, 75, 80, 94, 103, 109, 112, 144], "int": [36, 43, 70, 80, 103, 109, 112], "effici": [36, 42, 70, 80, 103, 109, 112], "through": [36, 70, 80, 103, 109, 112], "iter": [36, 42, 70, 80, 103, 109, 112], "null": [36, 70, 80, 103, 109, 112], "sum": [36, 70, 80, 103, 109, 112, 141, 144], "number": [36, 70, 80, 94, 103, 109, 112, 120, 128, 144], "to_list": [36, 70, 80, 103, 109, 112], "With": [36, 51, 70, 80, 83, 103, 109, 112, 116, 117, 119, 120, 144], "even": [36, 70, 80, 103, 109, 112], "larg": [36, 70, 80, 103, 109, 112], "sometim": [36, 42, 70, 80, 103, 109, 112, 144], "construct": [36, 70, 72, 80, 103, 104, 109, 112, 144], "explicitli": [38, 39, 112, 144], "handl": [38, 39, 112, 144], "without": [38, 39, 42, 75, 94, 128, 144], "error": [38, 39, 42, 112], "nonstrict": [42, 103], "singleton": [42, 80, 141], "lazi": [42, 103, 104], "enabl": 42, "tail": [42, 103, 144], "optim": [42, 103, 144], "closer": 42, "look": 42, "signatur": [42, 103, 128, 141, 142], "understand": [42, 144], "bit": [42, 128, 144], "think": [42, 128, 144], "accumul": [42, 70, 103], "lacc": 42, "explain": 42, "featur": [42, 64, 142, 144], "stop": [42, 103], "short": [42, 103, 144], "circuit": [42, 103, 144], "therefor": [42, 94, 112], "might": [42, 94, 103, 104, 112, 144], "process": [42, 144], "finit": 42, "time": [42, 94, 112, 128], "modifi": [42, 141, 144], "trigger": 42, "long": [42, 103, 104], "exceed": [42, 103, 104], "maximum": [42, 103, 104], "depth": [42, 103, 104], "overflow": [42, 103], "stack": [42, 103], "post": 42, "pone": 42, "happen": [42, 103, 104, 112], "yet": [42, 112, 144], "anoth": [42, 75, 94, 144], "becom": [42, 94], "continu": [42, 103], "actual": [42, 144], "get": [42, 112, 144], "lazili": 42, "built": [42, 141], "reduc": 42, "support": [42, 94, 103, 128, 141, 144], "my_ani": 42, "els": [42, 103, 144], "100000": 42, "express": 42, "unmodifi": 42, "con": [42, 103, 104], "nil": [42, 103], "my_map": 42, "4": [42, 103, 104, 144], "9": [42, 103, 104], "16": [42, 103, 104], "25": [42, 103, 104, 144], "36": [42, 103, 104], "delai": 42, "link": [42, 101, 103, 104], "next": [42, 128], "element": [42, 55, 70, 80, 103, 109, 112, 144], "request": 42, "shouldn": 42, "caus": [42, 103, 104], "rather": 42, "hit": 42, "limit": 42, "too": [42, 144], "deep": 42, "earli": 42, "enough": [42, 103], "paus": 42, "A": [42, 103, 144], "summat": 42, "my_sum": [42, 103], "0": [42, 80, 103, 120, 142, 144], "100": [42, 94, 144], "5050": 42, "1000000": [42, 103], "As": [42, 103], "alreadi": [42, 59, 75, 144], "shown": [42, 75, 144], "seem": [42, 55, 64, 65, 80, 94, 103, 109, 112, 116, 117, 118, 119, 120, 128], "surpris": 42, "noth": [42, 112, 144], "my_head": 42, "num": 45, "repres": [46, 72, 112, 128, 144], "covari": 47, "test": [47, 55, 64, 65, 72, 141, 142], "sample_functor_type_constructor": 47, "similari": 51, "__annotations__": [51, 80, 83, 103, 109, 112, 116, 117, 119, 120], "mark": [51, 80, 83, 112, 116, 117, 119, 120], "non": [51, 75, 80, 83, 112, 116, 117, 119, 120], "exist": [51, 75, 80, 83, 112, 116, 117, 119, 120, 141], "workaround": [51, 80, 83, 112, 116, 117, 119, 120], "forcefulli": [51, 80, 83, 112, 116, 117, 119, 120], "creat": [51, 53, 75, 80, 83, 94, 95, 103, 104, 112, 116, 117, 119, 120, 128, 129, 130, 144], "__ge__": [51, 80, 83, 112, 116, 117, 119, 120], "__gt__": [51, 80, 83, 112, 116, 117, 119, 120], "delet": [51, 80, 83, 112, 116, 117, 119, 120, 141], "them": [51, 80, 83, 112, 116, 117, 119, 120, 141, 144], "show": [51, 80, 83, 112, 116, 117, 119, 120, 144], "__dir__": [51, 80, 83, 112, 116, 117, 119, 120], "access": [51, 80, 83, 112, 116, 117, 119, 120], "attributeerror": [51, 80, 83, 112, 116, 117, 119, 120], "hide": [51, 80, 83, 112, 116, 117, 119, 120, 141], "still": [51, 80, 83, 112, 116, 117, 119, 120], "__getattribute__": [51, 80, 83, 112, 116, 117, 119, 120], "obj": [51, 80, 83, 94, 112, 116, 117, 119, 120, 128], "love": 52, "between": [53, 83, 112, 141], "classmethod": 53, "sample_monoid_typ": 55, "sample_semigroup_typ": [55, 64, 65], "__add__": [55, 64, 65, 80, 94, 103, 109, 112, 116, 117, 118, 119, 120, 128, 144], "natur": [55, 64, 65, 80, 94, 103, 109, 112, 116, 117, 118, 119, 120, 128, 144], "concaten": [55, 64, 65, 80, 94, 103, 109, 112, 116, 117, 118, 119, 120, 128, 144], "contravari": [59, 141], "lmap": 59, "rmap": 59, "introduc": 59, "readabl": 62, "add": [64, 141, 144], "nor": 64, "sample_commutative_typ": 64, "acccumul": 69, "foldabl": [70, 75, 80, 103, 109, 112, 141], "evalut": [70, 112], "collect": [70, 80, 109, 112, 128, 144], "func": [70, 80, 109, 112], "basi": 71, "seemingli": 72, "implicit": 72, "mayb": [73, 130, 141], "concret": [75, 141], "here": [75, 94], "nest": [75, 144], "layer": 75, "f1": 75, "f2": 75, "three": [75, 94], "abov": [75, 130, 144], "motiv": [75, 142], "current": [75, 141], "abl": [75, 94, 128], "solut": [75, 80], "would": [75, 80, 112, 128, 144], "parent": 75, "unless": 75, "__init__": [75, 144], "pass": [75, 128, 144], "arg": [75, 80, 94, 128], "kwarg": [75, 80, 128, 139], "outer": 75, "slightli": [75, 112, 144], "conveni": [75, 94, 112, 128], "Not": 75, "realli": 75, "allow": [75, 141], "u": [75, 144], "decompos": 75, "turn": 75, "problem": 75, "explicit": [75, 112], "user": [75, 94, 128, 144], "underli": [75, 94], "correspond": [75, 112, 144], "convert": [75, 103, 130, 144], "idea": 80, "unord": 80, "hashmap": 80, "__attrs_init__": [80, 109], "dictionary__dict": 80, "attr": [80, 109], "__getitem__": 80, "kei": [80, 81], "alter": 80, "expect": [80, 103, 104], "altern": [80, 144], "prefer": 80, "done": [80, 112, 144], "constrain": 80, "separ": 80, "append_first": 80, "append_second": 80, "purpos": [80, 144], "input": [80, 128], "foldl_with_index": 80, "insert": 80, "lookup": 80, "function__f": 94, "function__arg": 94, "curri": [94, 97, 103, 109, 141, 144], "divid": 94, "arbitrarili": 94, "among": 94, "To": [94, 144], "illustr": [94, 144], "consid": 94, "def": [94, 144], "foo": [94, 144], "bar": [94, 144], "four": 94, "valid": 94, "abcd": 94, "hp": [94, 112, 144], "3": [94, 103, 104, 142, 144], "accept": [94, 141], "posit": [94, 128, 141], "exactli": [94, 144], "option": [94, 110], "keyword": [94, 128], "unus": 94, "reason": 94, "unambigu": 94, "point": 94, "alwai": [94, 103, 104], "case": [94, 112, 144], "knowledg": [94, 128], "simpler": [94, 128], "functionmonoid": 94, "though": [94, 112, 128], "avail": [94, 128, 144], "__attrs_post_init__": [94, 128], "__call__": [94, 128], "__code__": [94, 128], "input_strategi": [94, 118, 128], "integ": [94, 118, 128], "__get__": [94, 128], "objtyp": [94, 128], "stackoverflow": [94, 128], "3296318": [94, 128], "__pow__": [94, 128], "__signature__": [94, 128], "check_arg": 94, "check_f": 94, "decor": [97, 130, 144], "repeat": [103, 104], "scanl": [103, 104], "complex": [103, 104], "acc": [103, 104], "6": [103, 104], "drop": [103, 104], "10000": [103, 104, 144], "10001": [103, 104], "10002": [103, 104], "10003": [103, 104], "10004": [103, 104], "10005": [103, 104], "10006": [103, 104], "bewar": [103, 104], "huge": [103, 104], "recursionerror": [103, 104], "previou": [103, 104], "__repr": 103, "maxdepth": 103, "_scanl": 103, "n": [103, 107], "strict": 103, "probabl": 103, "foldr_lazi": [103, 144], "exce": 103, "code": [103, 144], "block": 103, "until": [103, 144], "total": [103, 144], "string": [103, 141, 144], "paramet": [103, 141], "recurse_tco": 103, "quit": [103, 112], "end": 103, "badli": 103, "pattern": [103, 144], "specif": 103, "lx": 103, "million": 103, "unfortun": 103, "intern": 103, "list__x": 109, "assum": 109, "from_it": 109, "last": 109, "hashabl": [112, 116, 117, 119, 120, 141], "present": 112, "simplest": 112, "wrap": [112, 130, 144], "programm": 112, "plain": 112, "whenev": 112, "someth": [112, 144], "check": 112, "somehow": 112, "And": [112, 141], "importantli": 112, "rememb": 112, "everi": 112, "forc": [112, 144], "Or": [112, 141, 144], "interestingli": 112, "focu": 112, "care": 112, "special": [112, 130, 144], "v": [112, 144], "43": [112, 144], "context": [112, 144], "than": [112, 144], "ve": [112, 144], "had": 112, "thing": 112, "didn": [112, 141], "worri": 112, "whether": [112, 144], "real": 112, "took": 112, "under": [112, 144], "hood": 112, "84": [112, 144], "your": [112, 130], "variabl": [112, 144], "wasn": 112, "ll": 112, "forget": [112, 144], "account": [112, 144], "classic": 112, "approach": [112, 144], "alright": [112, 144], "tini": 112, "starter": 112, "nada": 114, "product": [115, 144], "boolean": [116, 117], "app_endo": 118, "normal": [127, 128, 130], "uncurri": [128, 141], "uncurriedfunction__f": 128, "anyth": 128, "automat": [128, 130], "notat": 128, "abus": 128, "output": [128, 144], "uncurriedfunctionmonoid": [128, 141], "By": 130, "treat": [130, 144], "maybelist": 130, "20": [130, 144], "30": [130, 144], "own": [130, 144], "custom": 130, "hask": [140, 142], "categori": [140, 142], "inspir": [140, 142, 144], "lift4": 141, "lift5": 141, "flip": [141, 144], "uncurriedfunct": 141, "arbitrari": 141, "renam": 141, "lifta2": 141, "lift2": [141, 144], "lifta3": 141, "lift3": [141, 144], "sampl": 141, "particular": 141, "kept": 141, "constant": 141, "interest": [141, 144], "linkedlist": 141, "mask": 141, "out": 141, "black": 141, "magic": 141, "mandatori": 141, "commutativemonoid": 141, "pypi": [141, 144], "releas": 141, "improv": 141, "docstr": 141, "maybet": 141, "identityt": 141, "adapt": 141, "len": 141, "prism": 141, "const": 141, "overview": 142, "instal": 142, "algebra": 142, "adt": 142, "api": [142, 144], "changelog": 142, "index": 142, "search": 142, "page": 142, "pip": 144, "develop": 144, "version": 144, "main": 144, "contribut": 144, "section": 144, "quick": 144, "glimps": 144, "usag": 144, "document": 144, "detail": 144, "explan": 144, "know": 144, "duck": 144, "much": 144, "sound": 144, "start": 144, "full": 144, "highlight": 144, "few": 144, "most": 144, "ones": 144, "regardless": 144, "inc": 144, "help": 144, "mistak": 144, "part": 144, "lot": 144, "being": 144, "callabl": 144, "stai": 144, "been": 144, "z": 144, "abc": 144, "bound": 144, "counterpart": 144, "easier": 144, "written": 144, "small": 144, "entir": 144, "directli": 144, "11": 144, "21": 144, "31": 144, "40": 144, "50": 144, "pictur": 144, "good": 144, "concept": 144, "re": 144, "familiar": 144, "modif": 144, "extrem": 144, "101": 144, "inc_mayb": 144, "squar": 144, "notic": 144, "remain": 144, "add3": 144, "add3_a": 144, "add3_ab": 144, "143": 144, "again": 144, "itself": 144, "difficult": 144, "invert": 144, "zero": 144, "There": 144, "mention": 144, "below": 144, "whose": 144, "binari": 144, "s1": 144, "s2": 144, "foobar": 144, "disappear": 144, "control": 144, "inform": 144, "state": 144, "reader": 144, "writer": 144, "nicer": 144, "experi": 144, "fix": 144, "predefin": 144, "suddenli": 144, "despit": 144, "major": 144, "drawback": 144, "new": 144, "interpret": 144, "compact": 144, "12": 144, "22": 144, "32": 144, "were": 144, "chosen": 144, "mymayb": 144, "myjust": 144, "mynoth": 144, "inc_or_di": 144, "miss": 144, "clear": 144, "split": 144, "wherea": 144, "easi": 144, "tco": 144}, "objects": {"": [[140, 0, 0, "-", "haskpy"]], "haskpy": [[0, 0, 0, "-", "optics"], [4, 0, 0, "-", "testing"], [5, 0, 0, "-", "typeclasses"], [73, 0, 0, "-", "types"], [136, 0, 0, "-", "utils"]], "haskpy.optics": [[1, 1, 1, "", "adapter"], [2, 1, 1, "", "lens"], [3, 1, 1, "", "prism"]], "haskpy.typeclasses": [[6, 0, 0, "-", "applicative"], [8, 0, 0, "-", "apply_"], [17, 0, 0, "-", "bifunctor"], [19, 0, 0, "-", "bind_"], [23, 0, 0, "-", "cartesian"], [25, 0, 0, "-", "cocartesian"], [27, 0, 0, "-", "contravariant"], [31, 0, 0, "-", "equality"], [35, 0, 0, "-", "foldable"], [46, 0, 0, "-", "functor"], [50, 0, 0, "-", "hashable"], [52, 0, 0, "-", "monad"], [54, 0, 0, "-", "monoid"], [56, 0, 0, "-", "ord"], [58, 0, 0, "-", "profunctor"], [61, 0, 0, "-", "readable"], [63, 0, 0, "-", "semigroup"], [67, 0, 0, "-", "show"], [69, 0, 0, "-", "traversable"], [71, 0, 0, "-", "typeclass"]], "haskpy.typeclasses.applicative": [[7, 2, 1, "", "Applicative"]], "haskpy.typeclasses.applicative.Applicative": [[7, 3, 1, "", "__lshift__"], [7, 3, 1, "", "__matmul__"], [7, 3, 1, "", "__rpow__"], [7, 3, 1, "", "__rshift__"], [7, 3, 1, "", "apply"], [7, 3, 1, "", "apply_first"], [7, 3, 1, "", "apply_second"], [7, 3, 1, "", "apply_to"], [7, 3, 1, "", "flap"], [7, 3, 1, "", "map"], [7, 3, 1, "", "pure"], [7, 3, 1, "", "replace"]], "haskpy.typeclasses.apply_": [[9, 2, 1, "", "Apply"], [10, 1, 1, "", "apply"], [11, 1, 1, "", "apply_first"], [12, 1, 1, "", "apply_second"], [13, 1, 1, "", "lift2"], [14, 1, 1, "", "lift3"], [15, 1, 1, "", "lift4"], [16, 1, 1, "", "lift5"]], "haskpy.typeclasses.apply_.Apply": [[9, 3, 1, "", "__lshift__"], [9, 3, 1, "", "__matmul__"], [9, 3, 1, "", "__rpow__"], [9, 3, 1, "", "__rshift__"], [9, 3, 1, "", "apply"], [9, 3, 1, "", "apply_first"], [9, 3, 1, "", "apply_second"], [9, 3, 1, "", "apply_to"], [9, 3, 1, "", "flap"], [9, 3, 1, "", "map"], [9, 3, 1, "", "replace"]], "haskpy.typeclasses.bifunctor": [[18, 2, 1, "", "Bifunctor"]], "haskpy.typeclasses.bind_": [[20, 2, 1, "", "Bind"], [21, 1, 1, "", "bind"], [22, 1, 1, "", "join"]], "haskpy.typeclasses.bind_.Bind": [[20, 3, 1, "", "__lshift__"], [20, 3, 1, "", "__matmul__"], [20, 3, 1, "", "__mod__"], [20, 3, 1, "", "__rpow__"], [20, 3, 1, "", "__rshift__"], [20, 3, 1, "", "apply"], [20, 3, 1, "", "apply_first"], [20, 3, 1, "", "apply_second"], [20, 3, 1, "", "apply_to"], [20, 3, 1, "", "bind"], [20, 3, 1, "", "flap"], [20, 3, 1, "", "join"], [20, 3, 1, "", "map"], [20, 3, 1, "", "replace"]], "haskpy.typeclasses.cartesian": [[24, 2, 1, "", "Cartesian"]], "haskpy.typeclasses.cartesian.Cartesian": [[24, 3, 1, "", "__rpow__"], [24, 3, 1, "", "contramap"], [24, 3, 1, "", "contrareplace"], [24, 3, 1, "", "dimap"], [24, 3, 1, "", "first"], [24, 3, 1, "", "flap"], [24, 3, 1, "", "map"], [24, 3, 1, "", "replace"], [24, 3, 1, "", "second"]], "haskpy.typeclasses.cocartesian": [[26, 2, 1, "", "Cocartesian"]], "haskpy.typeclasses.cocartesian.Cocartesian": [[26, 3, 1, "", "__rpow__"], [26, 3, 1, "", "contramap"], [26, 3, 1, "", "contrareplace"], [26, 3, 1, "", "dimap"], [26, 3, 1, "", "flap"], [26, 3, 1, "", "left"], [26, 3, 1, "", "map"], [26, 3, 1, "", "replace"], [26, 3, 1, "", "right"]], "haskpy.typeclasses.contravariant": [[28, 2, 1, "", "Contravariant"], [29, 1, 1, "", "contramap"], [30, 1, 1, "", "contrareplace"]], "haskpy.typeclasses.contravariant.Contravariant": [[28, 3, 1, "", "contramap"], [28, 3, 1, "", "contrareplace"]], "haskpy.typeclasses.equality": [[32, 2, 1, "", "Eq"], [33, 1, 1, "", "eq"], [34, 1, 1, "", "ne"]], "haskpy.typeclasses.equality.Eq": [[32, 3, 1, "", "__eq__"], [32, 4, 1, "", "__hash__"], [32, 3, 1, "", "__ne__"]], "haskpy.typeclasses.foldable": [[36, 2, 1, "", "Foldable"], [37, 1, 1, "", "elem"], [38, 1, 1, "", "fold"], [39, 1, 1, "", "fold_map"], [40, 1, 1, "", "foldl"], [41, 1, 1, "", "foldr"], [42, 1, 1, "", "foldr_lazy"], [43, 1, 1, "", "length"], [44, 1, 1, "", "null"], [45, 1, 1, "", "sum"]], "haskpy.typeclasses.foldable.Foldable": [[36, 3, 1, "", "__contains__"], [36, 3, 1, "", "__iter__"], [36, 3, 1, "", "__len__"], [36, 3, 1, "", "elem"], [36, 3, 1, "", "fold"], [36, 3, 1, "", "fold2"], [36, 3, 1, "", "fold_map"], [36, 3, 1, "", "foldl"], [36, 3, 1, "", "foldr"], [36, 3, 1, "", "head"], [36, 3, 1, "", "length"], [36, 3, 1, "", "null"], [36, 3, 1, "", "sum"], [36, 3, 1, "", "to_iter"]], "haskpy.typeclasses.functor": [[47, 2, 1, "", "Functor"], [48, 1, 1, "", "map"], [49, 1, 1, "", "replace"]], "haskpy.typeclasses.functor.Functor": [[47, 3, 1, "", "__rpow__"], [47, 3, 1, "", "flap"], [47, 3, 1, "", "map"], [47, 3, 1, "", "replace"]], "haskpy.typeclasses.hashable": [[51, 2, 1, "", "Hashable"]], "haskpy.typeclasses.hashable.Hashable": [[51, 4, 1, "", "__annotations__"], [51, 3, 1, "", "__eq__"], [51, 3, 1, "", "__hash__"], [51, 3, 1, "", "__ne__"]], "haskpy.typeclasses.monad": [[53, 2, 1, "", "Monad"]], "haskpy.typeclasses.monad.Monad": [[53, 3, 1, "", "__lshift__"], [53, 3, 1, "", "__matmul__"], [53, 3, 1, "", "__mod__"], [53, 3, 1, "", "__rpow__"], [53, 3, 1, "", "__rshift__"], [53, 3, 1, "", "apply"], [53, 3, 1, "", "apply_first"], [53, 3, 1, "", "apply_second"], [53, 3, 1, "", "apply_to"], [53, 3, 1, "", "bind"], [53, 3, 1, "", "flap"], [53, 3, 1, "", "join"], [53, 3, 1, "", "map"], [53, 3, 1, "", "pure"], [53, 3, 1, "", "replace"]], "haskpy.typeclasses.monoid": [[55, 2, 1, "", "Monoid"]], "haskpy.typeclasses.monoid.Monoid": [[55, 3, 1, "", "__add__"], [55, 3, 1, "", "append"], [55, 5, 1, "", "empty"]], "haskpy.typeclasses.ord": [[57, 2, 1, "", "Ord"]], "haskpy.typeclasses.profunctor": [[59, 2, 1, "", "Profunctor"], [60, 1, 1, "", "dimap"]], "haskpy.typeclasses.profunctor.Profunctor": [[59, 3, 1, "", "__rpow__"], [59, 3, 1, "", "contramap"], [59, 3, 1, "", "contrareplace"], [59, 3, 1, "", "dimap"], [59, 3, 1, "", "flap"], [59, 3, 1, "", "map"], [59, 3, 1, "", "replace"]], "haskpy.typeclasses.readable": [[62, 2, 1, "", "Read"]], "haskpy.typeclasses.semigroup": [[64, 2, 1, "", "Commutative"], [65, 2, 1, "", "Semigroup"], [66, 1, 1, "", "append"]], "haskpy.typeclasses.semigroup.Commutative": [[64, 3, 1, "", "__add__"], [64, 3, 1, "", "append"]], "haskpy.typeclasses.semigroup.Semigroup": [[65, 3, 1, "", "__add__"], [65, 3, 1, "", "append"]], "haskpy.typeclasses.show": [[68, 2, 1, "", "Show"]], "haskpy.typeclasses.traversable": [[70, 2, 1, "", "Traversable"]], "haskpy.typeclasses.traversable.Traversable": [[70, 3, 1, "", "__contains__"], [70, 3, 1, "", "__iter__"], [70, 3, 1, "", "__len__"], [70, 3, 1, "", "__rpow__"], [70, 3, 1, "", "elem"], [70, 3, 1, "", "flap"], [70, 3, 1, "", "fold"], [70, 3, 1, "", "fold2"], [70, 3, 1, "", "fold_map"], [70, 3, 1, "", "foldl"], [70, 3, 1, "", "foldr"], [70, 3, 1, "", "head"], [70, 3, 1, "", "length"], [70, 3, 1, "", "map"], [70, 3, 1, "", "null"], [70, 3, 1, "", "replace"], [70, 3, 1, "", "sequence"], [70, 3, 1, "", "sum"], [70, 3, 1, "", "to_iter"], [70, 3, 1, "", "traverse"]], "haskpy.typeclasses.typeclass": [[72, 2, 1, "", "Type"]], "haskpy.types": [[74, 0, 0, "-", "compose"], [77, 0, 0, "-", "constant"], [79, 0, 0, "-", "dictionary"], [82, 0, 0, "-", "either"], [93, 0, 0, "-", "function"], [98, 0, 0, "-", "identity"], [99, 0, 0, "-", "io"], [101, 0, 0, "-", "linkedlist"], [108, 0, 0, "-", "list"], [110, 0, 0, "-", "maybe"], [115, 0, 0, "-", "monoids"], [121, 0, 0, "-", "reader"], [124, 0, 0, "-", "state"], [127, 0, 0, "-", "uncurried"], [131, 0, 0, "-", "validation"], [133, 0, 0, "-", "writer"]], "haskpy.types.compose": [[75, 1, 1, "", "Compose"], [76, 1, 1, "", "decompose"]], "haskpy.types.constant": [[78, 2, 1, "", "Constant"]], "haskpy.types.dictionary": [[80, 2, 1, "", "Dictionary"], [81, 1, 1, "", "lookup"]], "haskpy.types.dictionary.Dictionary": [[80, 3, 1, "", "__add__"], [80, 4, 1, "", "__annotations__"], [80, 3, 1, "", "__attrs_init__"], [80, 3, 1, "", "__contains__"], [80, 3, 1, "", "__eq__"], [80, 3, 1, "", "__eq_test__"], [80, 3, 1, "", "__getitem__"], [80, 4, 1, "", "__hash__"], [80, 3, 1, "", "__iter__"], [80, 3, 1, "", "__len__"], [80, 3, 1, "", "__lshift__"], [80, 3, 1, "", "__matmul__"], [80, 3, 1, "", "__ne__"], [80, 3, 1, "", "__rpow__"], [80, 3, 1, "", "__rshift__"], [80, 3, 1, "", "alter"], [80, 3, 1, "", "append"], [80, 3, 1, "", "append_first"], [80, 3, 1, "", "append_second"], [80, 3, 1, "", "apply"], [80, 3, 1, "", "apply_first"], [80, 3, 1, "", "apply_second"], [80, 3, 1, "", "apply_to"], [80, 3, 1, "", "delete"], [80, 3, 1, "", "elem"], [80, 4, 1, "", "empty"], [80, 3, 1, "", "flap"], [80, 3, 1, "", "fold"], [80, 3, 1, "", "fold2"], [80, 3, 1, "", "fold_map"], [80, 3, 1, "", "foldl"], [80, 3, 1, "", "foldl_with_index"], [80, 3, 1, "", "foldr"], [80, 3, 1, "", "head"], [80, 3, 1, "", "insert"], [80, 3, 1, "", "keys"], [80, 3, 1, "", "length"], [80, 3, 1, "", "lookup"], [80, 3, 1, "", "map"], [80, 3, 1, "", "null"], [80, 3, 1, "", "replace"], [80, 3, 1, "", "sequence"], [80, 3, 1, "", "singleton"], [80, 3, 1, "", "sum"], [80, 3, 1, "", "to_iter"], [80, 3, 1, "", "traverse"], [80, 3, 1, "", "update"], [80, 3, 1, "", "values"]], "haskpy.types.either": [[83, 2, 1, "", "Either"], [84, 1, 1, "", "Left"], [85, 1, 1, "", "Right"], [86, 1, 1, "", "either"], [87, 1, 1, "", "from_left"], [88, 1, 1, "", "from_right"], [89, 1, 1, "", "is_left"], [90, 1, 1, "", "is_right"], [91, 1, 1, "", "left"], [92, 1, 1, "", "right"]], "haskpy.types.either.Either": [[83, 4, 1, "", "__annotations__"], [83, 3, 1, "", "__eq__"], [83, 3, 1, "", "__eq_test__"], [83, 4, 1, "", "__hash__"], [83, 3, 1, "", "__lshift__"], [83, 3, 1, "", "__matmul__"], [83, 3, 1, "", "__mod__"], [83, 3, 1, "", "__ne__"], [83, 3, 1, "", "__rpow__"], [83, 3, 1, "", "__rshift__"], [83, 3, 1, "", "apply"], [83, 3, 1, "", "apply_first"], [83, 3, 1, "", "apply_second"], [83, 3, 1, "", "apply_to"], [83, 3, 1, "", "bind"], [83, 3, 1, "", "flap"], [83, 3, 1, "", "join"], [83, 3, 1, "", "map"], [83, 3, 1, "", "pure"], [83, 3, 1, "", "replace"]], "haskpy.types.function": [[94, 2, 1, "", "Function"], [95, 1, 1, "", "FunctionMonoid"], [96, 1, 1, "", "compose"], [97, 1, 1, "", "function"]], "haskpy.types.function.Function": [[94, 3, 1, "", "__add__"], [94, 3, 1, "", "__attrs_post_init__"], [94, 3, 1, "", "__call__"], [94, 5, 1, "", "__code__"], [94, 3, 1, "", "__eq_test__"], [94, 3, 1, "", "__get__"], [94, 3, 1, "", "__lshift__"], [94, 3, 1, "", "__matmul__"], [94, 3, 1, "", "__mod__"], [94, 3, 1, "", "__pow__"], [94, 3, 1, "", "__rpow__"], [94, 3, 1, "", "__rshift__"], [94, 5, 1, "", "__signature__"], [94, 3, 1, "", "append"], [94, 3, 1, "", "apply"], [94, 3, 1, "", "apply_first"], [94, 3, 1, "", "apply_second"], [94, 3, 1, "", "apply_to"], [94, 3, 1, "", "bind"], [94, 3, 1, "", "check_args"], [94, 3, 1, "", "check_f"], [94, 3, 1, "", "contramap"], [94, 3, 1, "", "contrareplace"], [94, 3, 1, "", "dimap"], [94, 3, 1, "", "first"], [94, 3, 1, "", "flap"], [94, 3, 1, "", "join"], [94, 3, 1, "", "left"], [94, 3, 1, "", "map"], [94, 3, 1, "", "pure"], [94, 3, 1, "", "replace"], [94, 3, 1, "", "right"], [94, 3, 1, "", "second"]], "haskpy.types.io": [[100, 2, 1, "", "IO"]], "haskpy.types.linkedlist": [[102, 1, 1, "", "Cons"], [103, 2, 1, "", "LinkedList"], [104, 6, 1, "", "Nil"], [105, 1, 1, "", "iterate"], [106, 1, 1, "", "repeat"], [107, 1, 1, "", "replicate"]], "haskpy.types.linkedlist.LinkedList": [[103, 3, 1, "", "__add__"], [103, 4, 1, "", "__annotations__"], [103, 3, 1, "", "__contains__"], [103, 3, 1, "", "__eq__"], [103, 3, 1, "", "__eq_test__"], [103, 4, 1, "", "__hash__"], [103, 3, 1, "", "__iter__"], [103, 3, 1, "", "__len__"], [103, 3, 1, "", "__lshift__"], [103, 3, 1, "", "__matmul__"], [103, 3, 1, "", "__mod__"], [103, 3, 1, "", "__ne__"], [103, 3, 1, "", "__repr"], [103, 3, 1, "", "__rpow__"], [103, 3, 1, "", "__rshift__"], [103, 3, 1, "", "_scanl"], [103, 3, 1, "", "append"], [103, 3, 1, "", "apply"], [103, 3, 1, "", "apply_first"], [103, 3, 1, "", "apply_second"], [103, 3, 1, "", "apply_to"], [103, 3, 1, "", "bind"], [103, 3, 1, "", "drop"], [103, 3, 1, "", "elem"], [103, 4, 1, "", "empty"], [103, 3, 1, "", "flap"], [103, 3, 1, "", "fold"], [103, 3, 1, "", "fold2"], [103, 3, 1, "", "fold_map"], [103, 3, 1, "", "foldl"], [103, 3, 1, "", "foldr"], [103, 3, 1, "", "foldr_lazy"], [103, 3, 1, "", "head"], [103, 3, 1, "", "join"], [103, 3, 1, "", "length"], [103, 3, 1, "", "map"], [103, 3, 1, "", "null"], [103, 3, 1, "", "pure"], [103, 3, 1, "", "recurse_tco"], [103, 3, 1, "", "replace"], [103, 3, 1, "", "scanl"], [103, 3, 1, "", "sum"], [103, 3, 1, "", "take"], [103, 3, 1, "", "to_iter"]], "haskpy.types.list": [[109, 2, 1, "", "List"]], "haskpy.types.list.List": [[109, 3, 1, "", "__add__"], [109, 4, 1, "", "__annotations__"], [109, 3, 1, "", "__attrs_init__"], [109, 3, 1, "", "__contains__"], [109, 3, 1, "", "__eq__"], [109, 3, 1, "", "__eq_test__"], [109, 4, 1, "", "__hash__"], [109, 3, 1, "", "__iter__"], [109, 3, 1, "", "__len__"], [109, 3, 1, "", "__lshift__"], [109, 3, 1, "", "__matmul__"], [109, 3, 1, "", "__mod__"], [109, 3, 1, "", "__ne__"], [109, 3, 1, "", "__rpow__"], [109, 3, 1, "", "__rshift__"], [109, 3, 1, "", "append"], [109, 3, 1, "", "apply"], [109, 3, 1, "", "apply_first"], [109, 3, 1, "", "apply_second"], [109, 3, 1, "", "apply_to"], [109, 3, 1, "", "bind"], [109, 3, 1, "", "elem"], [109, 4, 1, "", "empty"], [109, 3, 1, "", "flap"], [109, 3, 1, "", "fold"], [109, 3, 1, "", "fold2"], [109, 3, 1, "", "fold_map"], [109, 3, 1, "", "foldl"], [109, 3, 1, "", "foldr"], [109, 3, 1, "", "from_iter"], [109, 3, 1, "", "head"], [109, 3, 1, "", "join"], [109, 3, 1, "", "last"], [109, 3, 1, "", "length"], [109, 3, 1, "", "map"], [109, 3, 1, "", "null"], [109, 3, 1, "", "pure"], [109, 3, 1, "", "replace"], [109, 3, 1, "", "sequence"], [109, 3, 1, "", "sum"], [109, 3, 1, "", "to_iter"], [109, 3, 1, "", "traverse"]], "haskpy.types.maybe": [[111, 1, 1, "", "Just"], [112, 2, 1, "", "Maybe"], [113, 1, 1, "", "MaybeT"], [114, 6, 1, "", "Nothing"]], "haskpy.types.maybe.Maybe": [[112, 3, 1, "", "__add__"], [112, 4, 1, "", "__annotations__"], [112, 3, 1, "", "__contains__"], [112, 3, 1, "", "__eq__"], [112, 3, 1, "", "__eq_test__"], [112, 3, 1, "", "__hash__"], [112, 3, 1, "", "__iter__"], [112, 3, 1, "", "__len__"], [112, 3, 1, "", "__lshift__"], [112, 3, 1, "", "__matmul__"], [112, 3, 1, "", "__mod__"], [112, 3, 1, "", "__ne__"], [112, 3, 1, "", "__rpow__"], [112, 3, 1, "", "__rshift__"], [112, 3, 1, "", "append"], [112, 3, 1, "", "apply"], [112, 3, 1, "", "apply_first"], [112, 3, 1, "", "apply_second"], [112, 3, 1, "", "apply_to"], [112, 3, 1, "", "bind"], [112, 3, 1, "", "elem"], [112, 4, 1, "", "empty"], [112, 3, 1, "", "flap"], [112, 3, 1, "", "fold"], [112, 3, 1, "", "fold2"], [112, 3, 1, "", "fold_map"], [112, 3, 1, "", "foldl"], [112, 3, 1, "", "foldr"], [112, 3, 1, "", "head"], [112, 3, 1, "", "join"], [112, 3, 1, "", "length"], [112, 3, 1, "", "map"], [112, 3, 1, "", "null"], [112, 3, 1, "", "pure"], [112, 3, 1, "", "replace"], [112, 3, 1, "", "sequence"], [112, 3, 1, "", "sum"], [112, 3, 1, "", "to_iter"], [112, 3, 1, "", "traverse"]], "haskpy.types.monoids": [[116, 2, 1, "", "All"], [117, 2, 1, "", "Any"], [118, 2, 1, "", "Endo"], [119, 2, 1, "", "String"], [120, 2, 1, "", "Sum"]], "haskpy.types.monoids.All": [[116, 3, 1, "", "__add__"], [116, 4, 1, "", "__annotations__"], [116, 3, 1, "", "__eq__"], [116, 3, 1, "", "__hash__"], [116, 3, 1, "", "__ne__"], [116, 3, 1, "", "append"], [116, 4, 1, "", "empty"]], "haskpy.types.monoids.Any": [[117, 3, 1, "", "__add__"], [117, 4, 1, "", "__annotations__"], [117, 3, 1, "", "__eq__"], [117, 3, 1, "", "__hash__"], [117, 3, 1, "", "__ne__"], [117, 3, 1, "", "append"], [117, 4, 1, "", "empty"]], "haskpy.types.monoids.Endo": [[118, 3, 1, "", "__add__"], [118, 3, 1, "", "__eq_test__"], [118, 3, 1, "", "append"], [118, 4, 1, "", "empty"]], "haskpy.types.monoids.String": [[119, 3, 1, "", "__add__"], [119, 4, 1, "", "__annotations__"], [119, 3, 1, "", "__eq__"], [119, 3, 1, "", "__hash__"], [119, 3, 1, "", "__ne__"], [119, 3, 1, "", "append"], [119, 4, 1, "", "empty"]], "haskpy.types.monoids.Sum": [[120, 3, 1, "", "__add__"], [120, 4, 1, "", "__annotations__"], [120, 3, 1, "", "__eq__"], [120, 3, 1, "", "__hash__"], [120, 3, 1, "", "__ne__"], [120, 3, 1, "", "append"], [120, 4, 1, "", "empty"]], "haskpy.types.reader": [[122, 2, 1, "", "Reader"], [123, 1, 1, "", "ReaderT"]], "haskpy.types.state": [[125, 2, 1, "", "State"], [126, 1, 1, "", "StateT"]], "haskpy.types.uncurried": [[128, 2, 1, "", "UncurriedFunction"], [129, 1, 1, "", "UncurriedFunctionMonoid"], [130, 1, 1, "", "uncurried"]], "haskpy.types.uncurried.UncurriedFunction": [[128, 3, 1, "", "__add__"], [128, 3, 1, "", "__attrs_post_init__"], [128, 3, 1, "", "__call__"], [128, 5, 1, "", "__code__"], [128, 3, 1, "", "__eq_test__"], [128, 3, 1, "", "__get__"], [128, 3, 1, "", "__lshift__"], [128, 3, 1, "", "__matmul__"], [128, 3, 1, "", "__mod__"], [128, 3, 1, "", "__pow__"], [128, 3, 1, "", "__rpow__"], [128, 3, 1, "", "__rshift__"], [128, 5, 1, "", "__signature__"], [128, 3, 1, "", "append"], [128, 3, 1, "", "apply"], [128, 3, 1, "", "apply_first"], [128, 3, 1, "", "apply_second"], [128, 3, 1, "", "apply_to"], [128, 3, 1, "", "bind"], [128, 3, 1, "", "flap"], [128, 3, 1, "", "join"], [128, 3, 1, "", "map"], [128, 3, 1, "", "pure"], [128, 3, 1, "", "replace"]], "haskpy.types.validation": [[132, 2, 1, "", "Validation"]], "haskpy.types.writer": [[134, 2, 1, "", "Writer"], [135, 1, 1, "", "WriterT"]], "haskpy.utils": [[137, 1, 1, "", "const"], [138, 1, 1, "", "identity"], [139, 1, 1, "", "match"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:property", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"]}, "titleterms": {"haskpi": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 25, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 54, 56, 58, 60, 61, 63, 66, 67, 69, 71, 73, 74, 75, 76, 77, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 121, 123, 124, 126, 127, 129, 130, 131, 133, 135, 136, 137, 138, 139, 142], "optic": [0, 1, 2, 3, 144], "todo": [0, 5, 73, 80, 115, 144], "adapt": 1, "len": 2, "prism": 3, "test": [4, 144], "typeclass": [5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 25, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 54, 56, 58, 60, 61, 63, 66, 67, 69, 71, 144], "applic": [6, 7, 144], "appli": [8, 9, 10], "apply_": [10, 11, 12, 13, 14, 15, 16], "apply_first": 11, "apply_second": 12, "lift2": 13, "lift3": 14, "lift4": 15, "lift5": 16, "bifunctor": [17, 18], "bind": [19, 20, 21], "bind_": [21, 22], "join": 22, "cartesian": [23, 24], "cocartesian": [25, 26], "contravari": [27, 28, 29, 30], "contramap": 29, "contrareplac": 30, "equal": [31, 33, 34], "eq": [32, 33], "ne": 34, "foldabl": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 144], "elem": 37, "fold": 38, "fold_map": 39, "foldl": 40, "foldr": 41, "foldr_lazi": 42, "length": 43, "null": 44, "sum": [45, 120], "functor": [46, 47, 48, 49, 144], "map": 48, "replac": 49, "hashabl": [50, 51], "monad": [52, 53, 144], "monoid": [54, 55, 115, 144], "ord": [56, 57], "profunctor": [58, 59, 60, 144], "dimap": 60, "readabl": 61, "read": 62, "semigroup": [63, 65, 66], "commut": 64, "append": 66, "show": [67, 68], "travers": [69, 70, 144], "type": [72, 73, 74, 75, 76, 77, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 121, 123, 124, 126, 127, 129, 130, 131, 133, 135, 144], "compos": [74, 75, 76, 96, 144], "decompos": 76, "constant": [77, 78], "dictionari": [79, 80, 81], "lookup": 81, "either": [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "left": [84, 91], "right": [85, 92], "from_left": 87, "from_right": 88, "is_left": 89, "is_right": 90, "function": [93, 94, 95, 96, 97, 144], "functionmonoid": 95, "ident": [98, 138], "io": [99, 100], "linkedlist": [101, 102, 103, 104, 105, 106, 107], "con": 102, "nil": 104, "iter": 105, "repeat": 106, "replic": 107, "list": [108, 109, 144], "mayb": [110, 111, 112, 113, 114, 144], "just": 111, "maybet": 113, "noth": 114, "all": 116, "ani": 117, "endo": 118, "string": 119, "reader": [121, 122, 123], "readert": 123, "state": [124, 125, 126], "statet": 126, "uncurri": [127, 129, 130], "uncurriedfunct": 128, "uncurriedfunctionmonoid": 129, "valid": [131, 132], "writer": [133, 134, 135], "writert": 135, "util": [136, 137, 138, 139], "const": 137, "match": 139, "api": 140, "changelog": 141, "0": 141, "3": 141, "ad": 141, "chang": 141, "fix": 141, "2": 141, "remov": 141, "1": 141, "document": 142, "tabl": 142, "content": 142, "indic": 142, "motiv": 143, "overview": 144, "instal": 144, "signatur": 144, "exampl": 144, "oper": 144, "algebra": 144, "data": 144, "adt": 144, "transform": 144, "recurs": 144, "properti": 144, "base": 144}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"haskpy.optics": [[0, "module-haskpy.optics"]], "Todo": [[0, "id1"], [5, "id1"], [5, "id2"], [73, "id1"], [80, "id1"], [115, "id1"], [144, "id2"], [144, "id3"], [144, "id4"]], "haskpy.optics.adapter": [[1, "haskpy-optics-adapter"]], "haskpy.optics.lens": [[2, "haskpy-optics-lens"]], "haskpy.optics.prism": [[3, "haskpy-optics-prism"]], "haskpy.testing": [[4, "module-haskpy.testing"]], "haskpy.typeclasses": [[5, "module-haskpy.typeclasses"]], "haskpy.typeclasses.applicative": [[6, "module-haskpy.typeclasses.applicative"]], "Applicative": [[7, "applicative"]], "haskpy.typeclasses.apply": [[8, "module-haskpy.typeclasses.apply_"]], "Apply": [[9, "apply"]], "haskpy.typeclasses.apply_.apply": [[10, "haskpy-typeclasses-apply-apply"]], "haskpy.typeclasses.apply_.apply_first": [[11, "haskpy-typeclasses-apply-apply-first"]], "haskpy.typeclasses.apply_.apply_second": [[12, "haskpy-typeclasses-apply-apply-second"]], "haskpy.typeclasses.apply_.lift2": [[13, "haskpy-typeclasses-apply-lift2"]], "haskpy.typeclasses.apply_.lift3": [[14, "haskpy-typeclasses-apply-lift3"]], "haskpy.typeclasses.apply_.lift4": [[15, "haskpy-typeclasses-apply-lift4"]], "haskpy.typeclasses.apply_.lift5": [[16, "haskpy-typeclasses-apply-lift5"]], "haskpy.typeclasses.bifunctor": [[17, "module-haskpy.typeclasses.bifunctor"]], "Bifunctor": [[18, "bifunctor"]], "haskpy.typeclasses.bind": [[19, "module-haskpy.typeclasses.bind_"]], "Bind": [[20, "bind"]], "haskpy.typeclasses.bind_.bind": [[21, "haskpy-typeclasses-bind-bind"]], "haskpy.typeclasses.bind_.join": [[22, "haskpy-typeclasses-bind-join"]], "haskpy.typeclasses.cartesian": [[23, "module-haskpy.typeclasses.cartesian"]], "Cartesian": [[24, "cartesian"]], "haskpy.typeclasses.cocartesian": [[25, "module-haskpy.typeclasses.cocartesian"]], "Cocartesian": [[26, "cocartesian"]], "haskpy.typeclasses.contravariant": [[27, "module-haskpy.typeclasses.contravariant"]], "Contravariant": [[28, "contravariant"]], "haskpy.typeclasses.contravariant.contramap": [[29, "haskpy-typeclasses-contravariant-contramap"]], "haskpy.typeclasses.contravariant.contrareplace": [[30, "haskpy-typeclasses-contravariant-contrareplace"]], "haskpy.typeclasses.equality": [[31, "module-haskpy.typeclasses.equality"]], "Eq": [[32, "eq"]], "haskpy.typeclasses.equality.eq": [[33, "haskpy-typeclasses-equality-eq"]], "haskpy.typeclasses.equality.ne": [[34, "haskpy-typeclasses-equality-ne"]], "haskpy.typeclasses.foldable": [[35, "module-haskpy.typeclasses.foldable"]], "Foldable": [[36, "foldable"]], "haskpy.typeclasses.foldable.elem": [[37, "haskpy-typeclasses-foldable-elem"]], "haskpy.typeclasses.foldable.fold": [[38, "haskpy-typeclasses-foldable-fold"]], "haskpy.typeclasses.foldable.fold_map": [[39, "haskpy-typeclasses-foldable-fold-map"]], "haskpy.typeclasses.foldable.foldl": [[40, "haskpy-typeclasses-foldable-foldl"]], "haskpy.typeclasses.foldable.foldr": [[41, "haskpy-typeclasses-foldable-foldr"]], "haskpy.typeclasses.foldable.foldr_lazy": [[42, "haskpy-typeclasses-foldable-foldr-lazy"]], "haskpy.typeclasses.foldable.length": [[43, "haskpy-typeclasses-foldable-length"]], "haskpy.typeclasses.foldable.null": [[44, "haskpy-typeclasses-foldable-null"]], "haskpy.typeclasses.foldable.sum": [[45, "haskpy-typeclasses-foldable-sum"]], "haskpy.typeclasses.functor": [[46, "module-haskpy.typeclasses.functor"]], "Functor": [[47, "functor"]], "haskpy.typeclasses.functor.map": [[48, "haskpy-typeclasses-functor-map"]], "haskpy.typeclasses.functor.replace": [[49, "haskpy-typeclasses-functor-replace"]], "haskpy.typeclasses.hashable": [[50, "module-haskpy.typeclasses.hashable"]], "Hashable": [[51, "hashable"]], "haskpy.typeclasses.monad": [[52, "module-haskpy.typeclasses.monad"]], "Monad": [[53, "monad"]], "haskpy.typeclasses.monoid": [[54, "module-haskpy.typeclasses.monoid"]], "Monoid": [[55, "monoid"]], "haskpy.typeclasses.ord": [[56, "module-haskpy.typeclasses.ord"]], "Ord": [[57, "ord"]], "haskpy.typeclasses.profunctor": [[58, "module-haskpy.typeclasses.profunctor"]], "Profunctor": [[59, "profunctor"]], "haskpy.typeclasses.profunctor.dimap": [[60, "haskpy-typeclasses-profunctor-dimap"]], "haskpy.typeclasses.readable": [[61, "module-haskpy.typeclasses.readable"]], "Read": [[62, "read"]], "haskpy.typeclasses.semigroup": [[63, "module-haskpy.typeclasses.semigroup"]], "Commutative": [[64, "commutative"]], "Semigroup": [[65, "semigroup"]], "haskpy.typeclasses.semigroup.append": [[66, "haskpy-typeclasses-semigroup-append"]], "haskpy.typeclasses.show": [[67, "module-haskpy.typeclasses.show"]], "Show": [[68, "show"]], "haskpy.typeclasses.traversable": [[69, "module-haskpy.typeclasses.traversable"]], "Traversable": [[70, "traversable"]], "haskpy.typeclasses.typeclass": [[71, "module-haskpy.typeclasses.typeclass"]], "Type": [[72, "type"]], "haskpy.types": [[73, "module-haskpy.types"]], "haskpy.types.compose": [[74, "module-haskpy.types.compose"]], "haskpy.types.compose.Compose": [[75, "haskpy-types-compose-compose"]], "haskpy.types.compose.decompose": [[76, "haskpy-types-compose-decompose"]], "haskpy.types.constant": [[77, "module-haskpy.types.constant"]], "Constant": [[78, "constant"]], "haskpy.types.dictionary": [[79, "module-haskpy.types.dictionary"]], "Dictionary": [[80, "dictionary"]], "haskpy.types.dictionary.lookup": [[81, "haskpy-types-dictionary-lookup"]], "haskpy.types.either": [[82, "module-haskpy.types.either"]], "Either": [[83, "either"]], "haskpy.types.either.Left": [[84, "haskpy-types-either-left"]], "haskpy.types.either.Right": [[85, "haskpy-types-either-right"]], "haskpy.types.either.either": [[86, "haskpy-types-either-either"]], "haskpy.types.either.from_left": [[87, "haskpy-types-either-from-left"]], "haskpy.types.either.from_right": [[88, "haskpy-types-either-from-right"]], "haskpy.types.either.is_left": [[89, "haskpy-types-either-is-left"]], "haskpy.types.either.is_right": [[90, "haskpy-types-either-is-right"]], "haskpy.types.either.left": [[91, "haskpy-types-either-left"]], "haskpy.types.either.right": [[92, "haskpy-types-either-right"]], "haskpy.types.function": [[93, "module-haskpy.types.function"]], "Function": [[94, "function"]], "haskpy.types.function.FunctionMonoid": [[95, "haskpy-types-function-functionmonoid"]], "haskpy.types.function.compose": [[96, "haskpy-types-function-compose"]], "haskpy.types.function.function": [[97, "haskpy-types-function-function"]], "haskpy.types.identity": [[98, "module-haskpy.types.identity"]], "haskpy.types.io": [[99, "module-haskpy.types.io"]], "IO": [[100, "io"]], "haskpy.types.linkedlist": [[101, "module-haskpy.types.linkedlist"]], "haskpy.types.linkedlist.Cons": [[102, "haskpy-types-linkedlist-cons"]], "LinkedList": [[103, "linkedlist"]], "haskpy.types.linkedlist.Nil": [[104, "haskpy-types-linkedlist-nil"]], "haskpy.types.linkedlist.iterate": [[105, "haskpy-types-linkedlist-iterate"]], "haskpy.types.linkedlist.repeat": [[106, "haskpy-types-linkedlist-repeat"]], "haskpy.types.linkedlist.replicate": [[107, "haskpy-types-linkedlist-replicate"]], "haskpy.types.list": [[108, "module-haskpy.types.list"]], "List": [[109, "list"], [144, "list"]], "haskpy.types.maybe": [[110, "module-haskpy.types.maybe"]], "haskpy.types.maybe.Just": [[111, "haskpy-types-maybe-just"]], "Maybe": [[112, "maybe"], [144, "maybe"]], "haskpy.types.maybe.MaybeT": [[113, "haskpy-types-maybe-maybet"]], "haskpy.types.maybe.Nothing": [[114, "haskpy-types-maybe-nothing"]], "haskpy.types.monoids": [[115, "module-haskpy.types.monoids"]], "All": [[116, "all"]], "Any": [[117, "any"]], "Endo": [[118, "endo"]], "String": [[119, "string"]], "Sum": [[120, "sum"]], "haskpy.types.reader": [[121, "module-haskpy.types.reader"]], "Reader": [[122, "reader"]], "haskpy.types.reader.ReaderT": [[123, "haskpy-types-reader-readert"]], "haskpy.types.state": [[124, "module-haskpy.types.state"]], "State": [[125, "state"]], "haskpy.types.state.StateT": [[126, "haskpy-types-state-statet"]], "haskpy.types.uncurried": [[127, "module-haskpy.types.uncurried"]], "UncurriedFunction": [[128, "uncurriedfunction"]], "haskpy.types.uncurried.UncurriedFunctionMonoid": [[129, "haskpy-types-uncurried-uncurriedfunctionmonoid"]], "haskpy.types.uncurried.uncurried": [[130, "haskpy-types-uncurried-uncurried"]], "haskpy.types.validation": [[131, "module-haskpy.types.validation"]], "Validation": [[132, "validation"]], "haskpy.types.writer": [[133, "module-haskpy.types.writer"]], "Writer": [[134, "writer"]], "haskpy.types.writer.WriterT": [[135, "haskpy-types-writer-writert"]], "haskpy.utils": [[136, "module-haskpy.utils"]], "haskpy.utils.const": [[137, "haskpy-utils-const"]], "haskpy.utils.identity": [[138, "haskpy-utils-identity"]], "haskpy.utils.match": [[139, "haskpy-utils-match"]], "API": [[140, "api"]], "Changelog": [[141, "changelog"]], "0.3.0": [[141, "id1"]], "Added": [[141, "added"], [141, "id3"], [141, "id13"]], "Changed": [[141, "changed"], [141, "id4"], [141, "id9"], [141, "id11"]], "Fixed": [[141, "fixed"], [141, "id5"], [141, "id7"]], "0.2.0": [[141, "id2"]], "Removed": [[141, "removed"]], "0.1.3": [[141, "id6"]], "0.1.2": [[141, "id8"]], "0.1.1": [[141, "id10"]], "0.1.0": [[141, "id12"]], "HaskPy documentation": [[142, "haskpy-documentation"]], "Table of contents:": [[142, null]], "Indices and tables": [[142, "indices-and-tables"]], "Motivation": [[143, "motivation"]], "Overview": [[144, "overview"]], "Installing": [[144, "installing"]], "Types": [[144, "types"]], "Functions": [[144, "functions"]], "Type signature": [[144, "type-signature"]], "Typeclasses": [[144, "typeclasses"]], "Functors, applicatives and monads": [[144, "functors-applicatives-and-monads"]], "Monoids": [[144, "monoids"]], "Foldables": [[144, "foldables"]], "Traversables": [[144, "traversables"]], "Monad examples": [[144, "monad-examples"]], "Operators": [[144, "operators"]], "Algebraic data types (ADTs)": [[144, "algebraic-data-types-adts"]], "Profunctor optics": [[144, "profunctor-optics"]], "Compose and monad transformers": [[144, "compose-and-monad-transformers"]], "Recursion": [[144, "recursion"]], "Property-based testing": [[144, "property-based-testing"]]}, "indexentries": {"haskpy.optics": [[0, "module-haskpy.optics"]], "module": [[0, "module-haskpy.optics"], [4, "module-haskpy.testing"], [5, "module-haskpy.typeclasses"], [6, "module-haskpy.typeclasses.applicative"], [8, "module-haskpy.typeclasses.apply_"], [17, "module-haskpy.typeclasses.bifunctor"], [19, "module-haskpy.typeclasses.bind_"], [23, "module-haskpy.typeclasses.cartesian"], [25, "module-haskpy.typeclasses.cocartesian"], [27, "module-haskpy.typeclasses.contravariant"], [31, "module-haskpy.typeclasses.equality"], [35, "module-haskpy.typeclasses.foldable"], [46, "module-haskpy.typeclasses.functor"], [50, "module-haskpy.typeclasses.hashable"], [52, "module-haskpy.typeclasses.monad"], [54, "module-haskpy.typeclasses.monoid"], [56, "module-haskpy.typeclasses.ord"], [58, "module-haskpy.typeclasses.profunctor"], [61, "module-haskpy.typeclasses.readable"], [63, "module-haskpy.typeclasses.semigroup"], [67, "module-haskpy.typeclasses.show"], [69, "module-haskpy.typeclasses.traversable"], [71, "module-haskpy.typeclasses.typeclass"], [73, "module-haskpy.types"], [74, "module-haskpy.types.compose"], [77, "module-haskpy.types.constant"], [79, "module-haskpy.types.dictionary"], [82, "module-haskpy.types.either"], [93, "module-haskpy.types.function"], [98, "module-haskpy.types.identity"], [99, "module-haskpy.types.io"], [101, "module-haskpy.types.linkedlist"], [108, "module-haskpy.types.list"], [110, "module-haskpy.types.maybe"], [115, "module-haskpy.types.monoids"], [121, "module-haskpy.types.reader"], [124, "module-haskpy.types.state"], [127, "module-haskpy.types.uncurried"], [131, "module-haskpy.types.validation"], [133, "module-haskpy.types.writer"], [136, "module-haskpy.utils"], [140, "module-haskpy"]], "adapter() (in module haskpy.optics)": [[1, "haskpy.optics.adapter"]], "lens() (in module haskpy.optics)": [[2, "haskpy.optics.lens"]], "prism() (in module haskpy.optics)": [[3, "haskpy.optics.prism"]], "haskpy.testing": [[4, "module-haskpy.testing"]], "haskpy.typeclasses": [[5, "module-haskpy.typeclasses"]], "haskpy.typeclasses.applicative": [[6, "module-haskpy.typeclasses.applicative"]], "applicative (class in haskpy.typeclasses.applicative)": [[7, "haskpy.typeclasses.applicative.Applicative"]], "__lshift__() (applicative method)": [[7, "haskpy.typeclasses.applicative.Applicative.__lshift__"]], "__matmul__() (applicative method)": [[7, "haskpy.typeclasses.applicative.Applicative.__matmul__"]], "__rpow__() (applicative method)": [[7, "haskpy.typeclasses.applicative.Applicative.__rpow__"]], "__rshift__() (applicative method)": [[7, "haskpy.typeclasses.applicative.Applicative.__rshift__"]], "apply() (applicative method)": [[7, "haskpy.typeclasses.applicative.Applicative.apply"]], "apply_first() (applicative method)": [[7, "haskpy.typeclasses.applicative.Applicative.apply_first"]], "apply_second() (applicative method)": [[7, "haskpy.typeclasses.applicative.Applicative.apply_second"]], "apply_to() (applicative method)": [[7, "haskpy.typeclasses.applicative.Applicative.apply_to"]], "flap() (applicative method)": [[7, "haskpy.typeclasses.applicative.Applicative.flap"]], "map() (applicative method)": [[7, "haskpy.typeclasses.applicative.Applicative.map"]], "pure() (applicative method)": [[7, "haskpy.typeclasses.applicative.Applicative.pure"]], "replace() (applicative method)": [[7, "haskpy.typeclasses.applicative.Applicative.replace"]], "haskpy.typeclasses.apply_": [[8, "module-haskpy.typeclasses.apply_"]], "apply (class in haskpy.typeclasses.apply_)": [[9, "haskpy.typeclasses.apply_.Apply"]], "__lshift__() (apply method)": [[9, "haskpy.typeclasses.apply_.Apply.__lshift__"]], "__matmul__() (apply method)": [[9, "haskpy.typeclasses.apply_.Apply.__matmul__"]], "__rpow__() (apply method)": [[9, "haskpy.typeclasses.apply_.Apply.__rpow__"]], "__rshift__() (apply method)": [[9, "haskpy.typeclasses.apply_.Apply.__rshift__"]], "apply() (apply method)": [[9, "haskpy.typeclasses.apply_.Apply.apply"]], "apply_first() (apply method)": [[9, "haskpy.typeclasses.apply_.Apply.apply_first"]], "apply_second() (apply method)": [[9, "haskpy.typeclasses.apply_.Apply.apply_second"]], "apply_to() (apply method)": [[9, "haskpy.typeclasses.apply_.Apply.apply_to"]], "flap() (apply method)": [[9, "haskpy.typeclasses.apply_.Apply.flap"]], "map() (apply method)": [[9, "haskpy.typeclasses.apply_.Apply.map"]], "replace() (apply method)": [[9, "haskpy.typeclasses.apply_.Apply.replace"]], "apply() (in module haskpy.typeclasses.apply_)": [[10, "haskpy.typeclasses.apply_.apply"]], "apply_first() (in module haskpy.typeclasses.apply_)": [[11, "haskpy.typeclasses.apply_.apply_first"]], "apply_second() (in module haskpy.typeclasses.apply_)": [[12, "haskpy.typeclasses.apply_.apply_second"]], "lift2() (in module haskpy.typeclasses.apply_)": [[13, "haskpy.typeclasses.apply_.lift2"]], "lift3() (in module haskpy.typeclasses.apply_)": [[14, "haskpy.typeclasses.apply_.lift3"]], "lift4() (in module haskpy.typeclasses.apply_)": [[15, "haskpy.typeclasses.apply_.lift4"]], "lift5() (in module haskpy.typeclasses.apply_)": [[16, "haskpy.typeclasses.apply_.lift5"]], "haskpy.typeclasses.bifunctor": [[17, "module-haskpy.typeclasses.bifunctor"]], "bifunctor (class in haskpy.typeclasses.bifunctor)": [[18, "haskpy.typeclasses.bifunctor.Bifunctor"]], "haskpy.typeclasses.bind_": [[19, "module-haskpy.typeclasses.bind_"]], "bind (class in haskpy.typeclasses.bind_)": [[20, "haskpy.typeclasses.bind_.Bind"]], "__lshift__() (bind method)": [[20, "haskpy.typeclasses.bind_.Bind.__lshift__"]], "__matmul__() (bind method)": [[20, "haskpy.typeclasses.bind_.Bind.__matmul__"]], "__mod__() (bind method)": [[20, "haskpy.typeclasses.bind_.Bind.__mod__"]], "__rpow__() (bind method)": [[20, "haskpy.typeclasses.bind_.Bind.__rpow__"]], "__rshift__() (bind method)": [[20, "haskpy.typeclasses.bind_.Bind.__rshift__"]], "apply() (bind method)": [[20, "haskpy.typeclasses.bind_.Bind.apply"]], "apply_first() (bind method)": [[20, "haskpy.typeclasses.bind_.Bind.apply_first"]], "apply_second() (bind method)": [[20, "haskpy.typeclasses.bind_.Bind.apply_second"]], "apply_to() (bind method)": [[20, "haskpy.typeclasses.bind_.Bind.apply_to"]], "bind() (bind method)": [[20, "haskpy.typeclasses.bind_.Bind.bind"]], "flap() (bind method)": [[20, "haskpy.typeclasses.bind_.Bind.flap"]], "join() (bind method)": [[20, "haskpy.typeclasses.bind_.Bind.join"]], "map() (bind method)": [[20, "haskpy.typeclasses.bind_.Bind.map"]], "replace() (bind method)": [[20, "haskpy.typeclasses.bind_.Bind.replace"]], "bind() (in module haskpy.typeclasses.bind_)": [[21, "haskpy.typeclasses.bind_.bind"]], "join() (in module haskpy.typeclasses.bind_)": [[22, "haskpy.typeclasses.bind_.join"]], "haskpy.typeclasses.cartesian": [[23, "module-haskpy.typeclasses.cartesian"]], "cartesian (class in haskpy.typeclasses.cartesian)": [[24, "haskpy.typeclasses.cartesian.Cartesian"]], "__rpow__() (cartesian method)": [[24, "haskpy.typeclasses.cartesian.Cartesian.__rpow__"]], "contramap() (cartesian method)": [[24, "haskpy.typeclasses.cartesian.Cartesian.contramap"]], "contrareplace() (cartesian method)": [[24, "haskpy.typeclasses.cartesian.Cartesian.contrareplace"]], "dimap() (cartesian method)": [[24, "haskpy.typeclasses.cartesian.Cartesian.dimap"]], "first() (cartesian method)": [[24, "haskpy.typeclasses.cartesian.Cartesian.first"]], "flap() (cartesian method)": [[24, "haskpy.typeclasses.cartesian.Cartesian.flap"]], "map() (cartesian method)": [[24, "haskpy.typeclasses.cartesian.Cartesian.map"]], "replace() (cartesian method)": [[24, "haskpy.typeclasses.cartesian.Cartesian.replace"]], "second() (cartesian method)": [[24, "haskpy.typeclasses.cartesian.Cartesian.second"]], "haskpy.typeclasses.cocartesian": [[25, "module-haskpy.typeclasses.cocartesian"]], "cocartesian (class in haskpy.typeclasses.cocartesian)": [[26, "haskpy.typeclasses.cocartesian.Cocartesian"]], "__rpow__() (cocartesian method)": [[26, "haskpy.typeclasses.cocartesian.Cocartesian.__rpow__"]], "contramap() (cocartesian method)": [[26, "haskpy.typeclasses.cocartesian.Cocartesian.contramap"]], "contrareplace() (cocartesian method)": [[26, "haskpy.typeclasses.cocartesian.Cocartesian.contrareplace"]], "dimap() (cocartesian method)": [[26, "haskpy.typeclasses.cocartesian.Cocartesian.dimap"]], "flap() (cocartesian method)": [[26, "haskpy.typeclasses.cocartesian.Cocartesian.flap"]], "left() (cocartesian method)": [[26, "haskpy.typeclasses.cocartesian.Cocartesian.left"]], "map() (cocartesian method)": [[26, "haskpy.typeclasses.cocartesian.Cocartesian.map"]], "replace() (cocartesian method)": [[26, "haskpy.typeclasses.cocartesian.Cocartesian.replace"]], "right() (cocartesian method)": [[26, "haskpy.typeclasses.cocartesian.Cocartesian.right"]], "haskpy.typeclasses.contravariant": [[27, "module-haskpy.typeclasses.contravariant"]], "contravariant (class in haskpy.typeclasses.contravariant)": [[28, "haskpy.typeclasses.contravariant.Contravariant"]], "contramap() (contravariant method)": [[28, "haskpy.typeclasses.contravariant.Contravariant.contramap"]], "contrareplace() (contravariant method)": [[28, "haskpy.typeclasses.contravariant.Contravariant.contrareplace"]], "contramap() (in module haskpy.typeclasses.contravariant)": [[29, "haskpy.typeclasses.contravariant.contramap"]], "contrareplace() (in module haskpy.typeclasses.contravariant)": [[30, "haskpy.typeclasses.contravariant.contrareplace"]], "haskpy.typeclasses.equality": [[31, "module-haskpy.typeclasses.equality"]], "eq (class in haskpy.typeclasses.equality)": [[32, "haskpy.typeclasses.equality.Eq"]], "__eq__() (eq method)": [[32, "haskpy.typeclasses.equality.Eq.__eq__"]], "__hash__ (eq attribute)": [[32, "haskpy.typeclasses.equality.Eq.__hash__"]], "__ne__() (eq method)": [[32, "haskpy.typeclasses.equality.Eq.__ne__"]], "eq() (in module haskpy.typeclasses.equality)": [[33, "haskpy.typeclasses.equality.eq"]], "ne() (in module haskpy.typeclasses.equality)": [[34, "haskpy.typeclasses.equality.ne"]], "haskpy.typeclasses.foldable": [[35, "module-haskpy.typeclasses.foldable"]], "foldable (class in haskpy.typeclasses.foldable)": [[36, "haskpy.typeclasses.foldable.Foldable"]], "__contains__() (foldable method)": [[36, "haskpy.typeclasses.foldable.Foldable.__contains__"]], "__iter__() (foldable method)": [[36, "haskpy.typeclasses.foldable.Foldable.__iter__"]], "__len__() (foldable method)": [[36, "haskpy.typeclasses.foldable.Foldable.__len__"]], "elem() (foldable method)": [[36, "haskpy.typeclasses.foldable.Foldable.elem"]], "fold() (foldable method)": [[36, "haskpy.typeclasses.foldable.Foldable.fold"]], "fold2() (foldable method)": [[36, "haskpy.typeclasses.foldable.Foldable.fold2"]], "fold_map() (foldable method)": [[36, "haskpy.typeclasses.foldable.Foldable.fold_map"]], "foldl() (foldable method)": [[36, "haskpy.typeclasses.foldable.Foldable.foldl"]], "foldr() (foldable method)": [[36, "haskpy.typeclasses.foldable.Foldable.foldr"]], "head() (foldable method)": [[36, "haskpy.typeclasses.foldable.Foldable.head"]], "length() (foldable method)": [[36, "haskpy.typeclasses.foldable.Foldable.length"]], "null() (foldable method)": [[36, "haskpy.typeclasses.foldable.Foldable.null"]], "sum() (foldable method)": [[36, "haskpy.typeclasses.foldable.Foldable.sum"]], "to_iter() (foldable method)": [[36, "haskpy.typeclasses.foldable.Foldable.to_iter"]], "elem() (in module haskpy.typeclasses.foldable)": [[37, "haskpy.typeclasses.foldable.elem"]], "fold() (in module haskpy.typeclasses.foldable)": [[38, "haskpy.typeclasses.foldable.fold"]], "fold_map() (in module haskpy.typeclasses.foldable)": [[39, "haskpy.typeclasses.foldable.fold_map"]], "foldl() (in module haskpy.typeclasses.foldable)": [[40, "haskpy.typeclasses.foldable.foldl"]], "foldr() (in module haskpy.typeclasses.foldable)": [[41, "haskpy.typeclasses.foldable.foldr"]], "foldr_lazy() (in module haskpy.typeclasses.foldable)": [[42, "haskpy.typeclasses.foldable.foldr_lazy"]], "length() (in module haskpy.typeclasses.foldable)": [[43, "haskpy.typeclasses.foldable.length"]], "null() (in module haskpy.typeclasses.foldable)": [[44, "haskpy.typeclasses.foldable.null"]], "sum() (in module haskpy.typeclasses.foldable)": [[45, "haskpy.typeclasses.foldable.sum"]], "haskpy.typeclasses.functor": [[46, "module-haskpy.typeclasses.functor"]], "functor (class in haskpy.typeclasses.functor)": [[47, "haskpy.typeclasses.functor.Functor"]], "__rpow__() (functor method)": [[47, "haskpy.typeclasses.functor.Functor.__rpow__"]], "flap() (functor method)": [[47, "haskpy.typeclasses.functor.Functor.flap"]], "map() (functor method)": [[47, "haskpy.typeclasses.functor.Functor.map"]], "replace() (functor method)": [[47, "haskpy.typeclasses.functor.Functor.replace"]], "map() (in module haskpy.typeclasses.functor)": [[48, "haskpy.typeclasses.functor.map"]], "replace() (in module haskpy.typeclasses.functor)": [[49, "haskpy.typeclasses.functor.replace"]], "haskpy.typeclasses.hashable": [[50, "module-haskpy.typeclasses.hashable"]], "hashable (class in haskpy.typeclasses.hashable)": [[51, "haskpy.typeclasses.hashable.Hashable"]], "__annotations__ (hashable attribute)": [[51, "haskpy.typeclasses.hashable.Hashable.__annotations__"]], "__eq__() (hashable method)": [[51, "haskpy.typeclasses.hashable.Hashable.__eq__"]], "__hash__() (hashable method)": [[51, "haskpy.typeclasses.hashable.Hashable.__hash__"]], "__ne__() (hashable method)": [[51, "haskpy.typeclasses.hashable.Hashable.__ne__"]], "haskpy.typeclasses.monad": [[52, "module-haskpy.typeclasses.monad"]], "monad (class in haskpy.typeclasses.monad)": [[53, "haskpy.typeclasses.monad.Monad"]], "__lshift__() (monad method)": [[53, "haskpy.typeclasses.monad.Monad.__lshift__"]], "__matmul__() (monad method)": [[53, "haskpy.typeclasses.monad.Monad.__matmul__"]], "__mod__() (monad method)": [[53, "haskpy.typeclasses.monad.Monad.__mod__"]], "__rpow__() (monad method)": [[53, "haskpy.typeclasses.monad.Monad.__rpow__"]], "__rshift__() (monad method)": [[53, "haskpy.typeclasses.monad.Monad.__rshift__"]], "apply() (monad method)": [[53, "haskpy.typeclasses.monad.Monad.apply"]], "apply_first() (monad method)": [[53, "haskpy.typeclasses.monad.Monad.apply_first"]], "apply_second() (monad method)": [[53, "haskpy.typeclasses.monad.Monad.apply_second"]], "apply_to() (monad method)": [[53, "haskpy.typeclasses.monad.Monad.apply_to"]], "bind() (monad method)": [[53, "haskpy.typeclasses.monad.Monad.bind"]], "flap() (monad method)": [[53, "haskpy.typeclasses.monad.Monad.flap"]], "join() (monad method)": [[53, "haskpy.typeclasses.monad.Monad.join"]], "map() (monad method)": [[53, "haskpy.typeclasses.monad.Monad.map"]], "pure() (monad class method)": [[53, "haskpy.typeclasses.monad.Monad.pure"]], "replace() (monad method)": [[53, "haskpy.typeclasses.monad.Monad.replace"]], "haskpy.typeclasses.monoid": [[54, "module-haskpy.typeclasses.monoid"]], "monoid (class in haskpy.typeclasses.monoid)": [[55, "haskpy.typeclasses.monoid.Monoid"]], "__add__() (monoid method)": [[55, "haskpy.typeclasses.monoid.Monoid.__add__"]], "append() (monoid method)": [[55, "haskpy.typeclasses.monoid.Monoid.append"]], "empty (monoid property)": [[55, "haskpy.typeclasses.monoid.Monoid.empty"]], "haskpy.typeclasses.ord": [[56, "module-haskpy.typeclasses.ord"]], "ord (class in haskpy.typeclasses.ord)": [[57, "haskpy.typeclasses.ord.Ord"]], "haskpy.typeclasses.profunctor": [[58, "module-haskpy.typeclasses.profunctor"]], "profunctor (class in haskpy.typeclasses.profunctor)": [[59, "haskpy.typeclasses.profunctor.Profunctor"]], "__rpow__() (profunctor method)": [[59, "haskpy.typeclasses.profunctor.Profunctor.__rpow__"]], "contramap() (profunctor method)": [[59, "haskpy.typeclasses.profunctor.Profunctor.contramap"]], "contrareplace() (profunctor method)": [[59, "haskpy.typeclasses.profunctor.Profunctor.contrareplace"]], "dimap() (profunctor method)": [[59, "haskpy.typeclasses.profunctor.Profunctor.dimap"]], "flap() (profunctor method)": [[59, "haskpy.typeclasses.profunctor.Profunctor.flap"]], "map() (profunctor method)": [[59, "haskpy.typeclasses.profunctor.Profunctor.map"]], "replace() (profunctor method)": [[59, "haskpy.typeclasses.profunctor.Profunctor.replace"]], "dimap() (in module haskpy.typeclasses.profunctor)": [[60, "haskpy.typeclasses.profunctor.dimap"]], "haskpy.typeclasses.readable": [[61, "module-haskpy.typeclasses.readable"]], "read (class in haskpy.typeclasses.readable)": [[62, "haskpy.typeclasses.readable.Read"]], "haskpy.typeclasses.semigroup": [[63, "module-haskpy.typeclasses.semigroup"]], "commutative (class in haskpy.typeclasses.semigroup)": [[64, "haskpy.typeclasses.semigroup.Commutative"]], "__add__() (commutative method)": [[64, "haskpy.typeclasses.semigroup.Commutative.__add__"]], "append() (commutative method)": [[64, "haskpy.typeclasses.semigroup.Commutative.append"]], "semigroup (class in haskpy.typeclasses.semigroup)": [[65, "haskpy.typeclasses.semigroup.Semigroup"]], "__add__() (semigroup method)": [[65, "haskpy.typeclasses.semigroup.Semigroup.__add__"]], "append() (semigroup method)": [[65, "haskpy.typeclasses.semigroup.Semigroup.append"]], "append() (in module haskpy.typeclasses.semigroup)": [[66, "haskpy.typeclasses.semigroup.append"]], "haskpy.typeclasses.show": [[67, "module-haskpy.typeclasses.show"]], "show (class in haskpy.typeclasses.show)": [[68, "haskpy.typeclasses.show.Show"]], "haskpy.typeclasses.traversable": [[69, "module-haskpy.typeclasses.traversable"]], "traversable (class in haskpy.typeclasses.traversable)": [[70, "haskpy.typeclasses.traversable.Traversable"]], "__contains__() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.__contains__"]], "__iter__() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.__iter__"]], "__len__() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.__len__"]], "__rpow__() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.__rpow__"]], "elem() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.elem"]], "flap() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.flap"]], "fold() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.fold"]], "fold2() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.fold2"]], "fold_map() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.fold_map"]], "foldl() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.foldl"]], "foldr() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.foldr"]], "head() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.head"]], "length() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.length"]], "map() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.map"]], "null() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.null"]], "replace() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.replace"]], "sequence() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.sequence"]], "sum() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.sum"]], "to_iter() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.to_iter"]], "traverse() (traversable method)": [[70, "haskpy.typeclasses.traversable.Traversable.traverse"]], "haskpy.typeclasses.typeclass": [[71, "module-haskpy.typeclasses.typeclass"]], "type (class in haskpy.typeclasses.typeclass)": [[72, "haskpy.typeclasses.typeclass.Type"]], "haskpy.types": [[73, "module-haskpy.types"]], "haskpy.types.compose": [[74, "module-haskpy.types.compose"]], "compose() (in module haskpy.types.compose)": [[75, "haskpy.types.compose.Compose"]], "decompose() (in module haskpy.types.compose)": [[76, "haskpy.types.compose.decompose"]], "haskpy.types.constant": [[77, "module-haskpy.types.constant"]], "constant (class in haskpy.types.constant)": [[78, "haskpy.types.constant.Constant"]], "haskpy.types.dictionary": [[79, "module-haskpy.types.dictionary"]], "dictionary (class in haskpy.types.dictionary)": [[80, "haskpy.types.dictionary.Dictionary"]], "__add__() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.__add__"]], "__annotations__ (dictionary attribute)": [[80, "haskpy.types.dictionary.Dictionary.__annotations__"]], "__attrs_init__() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.__attrs_init__"]], "__contains__() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.__contains__"]], "__eq__() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.__eq__"]], "__eq_test__() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.__eq_test__"]], "__getitem__() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.__getitem__"]], "__hash__ (dictionary attribute)": [[80, "haskpy.types.dictionary.Dictionary.__hash__"]], "__iter__() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.__iter__"]], "__len__() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.__len__"]], "__lshift__() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.__lshift__"]], "__matmul__() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.__matmul__"]], "__ne__() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.__ne__"]], "__rpow__() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.__rpow__"]], "__rshift__() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.__rshift__"]], "alter() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.alter"]], "append() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.append"]], "append_first() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.append_first"]], "append_second() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.append_second"]], "apply() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.apply"]], "apply_first() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.apply_first"]], "apply_second() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.apply_second"]], "apply_to() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.apply_to"]], "delete() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.delete"]], "elem() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.elem"]], "empty (dictionary attribute)": [[80, "haskpy.types.dictionary.Dictionary.empty"]], "flap() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.flap"]], "fold() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.fold"]], "fold2() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.fold2"]], "fold_map() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.fold_map"]], "foldl() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.foldl"]], "foldl_with_index() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.foldl_with_index"]], "foldr() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.foldr"]], "head() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.head"]], "insert() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.insert"]], "keys() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.keys"]], "length() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.length"]], "lookup() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.lookup"]], "map() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.map"]], "null() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.null"]], "replace() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.replace"]], "sequence() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.sequence"]], "singleton() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.singleton"]], "sum() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.sum"]], "to_iter() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.to_iter"]], "traverse() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.traverse"]], "update() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.update"]], "values() (dictionary method)": [[80, "haskpy.types.dictionary.Dictionary.values"]], "lookup() (in module haskpy.types.dictionary)": [[81, "haskpy.types.dictionary.lookup"]], "haskpy.types.either": [[82, "module-haskpy.types.either"]], "either (class in haskpy.types.either)": [[83, "haskpy.types.either.Either"]], "__annotations__ (either attribute)": [[83, "haskpy.types.either.Either.__annotations__"]], "__eq__() (either method)": [[83, "haskpy.types.either.Either.__eq__"]], "__eq_test__() (either method)": [[83, "haskpy.types.either.Either.__eq_test__"]], "__hash__ (either attribute)": [[83, "haskpy.types.either.Either.__hash__"]], "__lshift__() (either method)": [[83, "haskpy.types.either.Either.__lshift__"]], "__matmul__() (either method)": [[83, "haskpy.types.either.Either.__matmul__"]], "__mod__() (either method)": [[83, "haskpy.types.either.Either.__mod__"]], "__ne__() (either method)": [[83, "haskpy.types.either.Either.__ne__"]], "__rpow__() (either method)": [[83, "haskpy.types.either.Either.__rpow__"]], "__rshift__() (either method)": [[83, "haskpy.types.either.Either.__rshift__"]], "apply() (either method)": [[83, "haskpy.types.either.Either.apply"]], "apply_first() (either method)": [[83, "haskpy.types.either.Either.apply_first"]], "apply_second() (either method)": [[83, "haskpy.types.either.Either.apply_second"]], "apply_to() (either method)": [[83, "haskpy.types.either.Either.apply_to"]], "bind() (either method)": [[83, "haskpy.types.either.Either.bind"]], "flap() (either method)": [[83, "haskpy.types.either.Either.flap"]], "join() (either method)": [[83, "haskpy.types.either.Either.join"]], "map() (either method)": [[83, "haskpy.types.either.Either.map"]], "pure() (either method)": [[83, "haskpy.types.either.Either.pure"]], "replace() (either method)": [[83, "haskpy.types.either.Either.replace"]], "left() (in module haskpy.types.either)": [[84, "haskpy.types.either.Left"], [91, "haskpy.types.either.left"]], "right() (in module haskpy.types.either)": [[85, "haskpy.types.either.Right"], [92, "haskpy.types.either.right"]], "either() (in module haskpy.types.either)": [[86, "haskpy.types.either.either"]], "from_left() (in module haskpy.types.either)": [[87, "haskpy.types.either.from_left"]], "from_right() (in module haskpy.types.either)": [[88, "haskpy.types.either.from_right"]], "is_left() (in module haskpy.types.either)": [[89, "haskpy.types.either.is_left"]], "is_right() (in module haskpy.types.either)": [[90, "haskpy.types.either.is_right"]], "haskpy.types.function": [[93, "module-haskpy.types.function"]], "function (class in haskpy.types.function)": [[94, "haskpy.types.function.Function"]], "__add__() (function method)": [[94, "haskpy.types.function.Function.__add__"]], "__attrs_post_init__() (function method)": [[94, "haskpy.types.function.Function.__attrs_post_init__"]], "__call__() (function method)": [[94, "haskpy.types.function.Function.__call__"]], "__code__ (function property)": [[94, "haskpy.types.function.Function.__code__"]], "__eq_test__() (function method)": [[94, "haskpy.types.function.Function.__eq_test__"]], "__get__() (function method)": [[94, "haskpy.types.function.Function.__get__"]], "__lshift__() (function method)": [[94, "haskpy.types.function.Function.__lshift__"]], "__matmul__() (function method)": [[94, "haskpy.types.function.Function.__matmul__"]], "__mod__() (function method)": [[94, "haskpy.types.function.Function.__mod__"]], "__pow__() (function method)": [[94, "haskpy.types.function.Function.__pow__"]], "__rpow__() (function method)": [[94, "haskpy.types.function.Function.__rpow__"]], "__rshift__() (function method)": [[94, "haskpy.types.function.Function.__rshift__"]], "__signature__ (function property)": [[94, "haskpy.types.function.Function.__signature__"]], "append() (function method)": [[94, "haskpy.types.function.Function.append"]], "apply() (function method)": [[94, "haskpy.types.function.Function.apply"]], "apply_first() (function method)": [[94, "haskpy.types.function.Function.apply_first"]], "apply_second() (function method)": [[94, "haskpy.types.function.Function.apply_second"]], "apply_to() (function method)": [[94, "haskpy.types.function.Function.apply_to"]], "bind() (function method)": [[94, "haskpy.types.function.Function.bind"]], "check_args() (function method)": [[94, "haskpy.types.function.Function.check_args"]], "check_f() (function method)": [[94, "haskpy.types.function.Function.check_f"]], "contramap() (function method)": [[94, "haskpy.types.function.Function.contramap"]], "contrareplace() (function method)": [[94, "haskpy.types.function.Function.contrareplace"]], "dimap() (function method)": [[94, "haskpy.types.function.Function.dimap"]], "first() (function method)": [[94, "haskpy.types.function.Function.first"]], "flap() (function method)": [[94, "haskpy.types.function.Function.flap"]], "join() (function method)": [[94, "haskpy.types.function.Function.join"]], "left() (function method)": [[94, "haskpy.types.function.Function.left"]], "map() (function method)": [[94, "haskpy.types.function.Function.map"]], "pure() (function method)": [[94, "haskpy.types.function.Function.pure"]], "replace() (function method)": [[94, "haskpy.types.function.Function.replace"]], "right() (function method)": [[94, "haskpy.types.function.Function.right"]], "second() (function method)": [[94, "haskpy.types.function.Function.second"]], "functionmonoid() (in module haskpy.types.function)": [[95, "haskpy.types.function.FunctionMonoid"]], "compose() (in module haskpy.types.function)": [[96, "haskpy.types.function.compose"]], "function() (in module haskpy.types.function)": [[97, "haskpy.types.function.function"]], "haskpy.types.identity": [[98, "module-haskpy.types.identity"]], "haskpy.types.io": [[99, "module-haskpy.types.io"]], "io (class in haskpy.types.io)": [[100, "haskpy.types.io.IO"]], "haskpy.types.linkedlist": [[101, "module-haskpy.types.linkedlist"]], "cons() (in module haskpy.types.linkedlist)": [[102, "haskpy.types.linkedlist.Cons"]], "linkedlist (class in haskpy.types.linkedlist)": [[103, "haskpy.types.linkedlist.LinkedList"]], "__add__() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.__add__"]], "__annotations__ (linkedlist attribute)": [[103, "haskpy.types.linkedlist.LinkedList.__annotations__"]], "__contains__() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.__contains__"]], "__eq__() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.__eq__"]], "__eq_test__() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.__eq_test__"]], "__hash__ (linkedlist attribute)": [[103, "haskpy.types.linkedlist.LinkedList.__hash__"]], "__iter__() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.__iter__"]], "__len__() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.__len__"]], "__lshift__() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.__lshift__"]], "__matmul__() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.__matmul__"]], "__mod__() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.__mod__"]], "__ne__() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.__ne__"]], "__repr() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.__repr"]], "__rpow__() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.__rpow__"]], "__rshift__() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.__rshift__"]], "_scanl() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList._scanl"]], "append() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.append"]], "apply() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.apply"]], "apply_first() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.apply_first"]], "apply_second() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.apply_second"]], "apply_to() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.apply_to"]], "bind() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.bind"]], "drop() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.drop"]], "elem() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.elem"]], "empty (linkedlist attribute)": [[103, "haskpy.types.linkedlist.LinkedList.empty"]], "flap() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.flap"]], "fold() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.fold"]], "fold2() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.fold2"]], "fold_map() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.fold_map"]], "foldl() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.foldl"]], "foldr() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.foldr"]], "foldr_lazy() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.foldr_lazy"]], "head() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.head"]], "join() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.join"]], "length() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.length"]], "map() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.map"]], "null() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.null"]], "pure() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.pure"]], "recurse_tco() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.recurse_tco"]], "replace() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.replace"]], "scanl() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.scanl"]], "sum() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.sum"]], "take() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.take"]], "to_iter() (linkedlist method)": [[103, "haskpy.types.linkedlist.LinkedList.to_iter"]], "nil (in module haskpy.types.linkedlist)": [[104, "haskpy.types.linkedlist.Nil"]], "iterate() (in module haskpy.types.linkedlist)": [[105, "haskpy.types.linkedlist.iterate"]], "repeat() (in module haskpy.types.linkedlist)": [[106, "haskpy.types.linkedlist.repeat"]], "replicate() (in module haskpy.types.linkedlist)": [[107, "haskpy.types.linkedlist.replicate"]], "haskpy.types.list": [[108, "module-haskpy.types.list"]], "list (class in haskpy.types.list)": [[109, "haskpy.types.list.List"]], "__add__() (list method)": [[109, "haskpy.types.list.List.__add__"]], "__annotations__ (list attribute)": [[109, "haskpy.types.list.List.__annotations__"]], "__attrs_init__() (list method)": [[109, "haskpy.types.list.List.__attrs_init__"]], "__contains__() (list method)": [[109, "haskpy.types.list.List.__contains__"]], "__eq__() (list method)": [[109, "haskpy.types.list.List.__eq__"]], "__eq_test__() (list method)": [[109, "haskpy.types.list.List.__eq_test__"]], "__hash__ (list attribute)": [[109, "haskpy.types.list.List.__hash__"]], "__iter__() (list method)": [[109, "haskpy.types.list.List.__iter__"]], "__len__() (list method)": [[109, "haskpy.types.list.List.__len__"]], "__lshift__() (list method)": [[109, "haskpy.types.list.List.__lshift__"]], "__matmul__() (list method)": [[109, "haskpy.types.list.List.__matmul__"]], "__mod__() (list method)": [[109, "haskpy.types.list.List.__mod__"]], "__ne__() (list method)": [[109, "haskpy.types.list.List.__ne__"]], "__rpow__() (list method)": [[109, "haskpy.types.list.List.__rpow__"]], "__rshift__() (list method)": [[109, "haskpy.types.list.List.__rshift__"]], "append() (list method)": [[109, "haskpy.types.list.List.append"]], "apply() (list method)": [[109, "haskpy.types.list.List.apply"]], "apply_first() (list method)": [[109, "haskpy.types.list.List.apply_first"]], "apply_second() (list method)": [[109, "haskpy.types.list.List.apply_second"]], "apply_to() (list method)": [[109, "haskpy.types.list.List.apply_to"]], "bind() (list method)": [[109, "haskpy.types.list.List.bind"]], "elem() (list method)": [[109, "haskpy.types.list.List.elem"]], "empty (list attribute)": [[109, "haskpy.types.list.List.empty"]], "flap() (list method)": [[109, "haskpy.types.list.List.flap"]], "fold() (list method)": [[109, "haskpy.types.list.List.fold"]], "fold2() (list method)": [[109, "haskpy.types.list.List.fold2"]], "fold_map() (list method)": [[109, "haskpy.types.list.List.fold_map"]], "foldl() (list method)": [[109, "haskpy.types.list.List.foldl"]], "foldr() (list method)": [[109, "haskpy.types.list.List.foldr"]], "from_iter() (list method)": [[109, "haskpy.types.list.List.from_iter"]], "head() (list method)": [[109, "haskpy.types.list.List.head"]], "join() (list method)": [[109, "haskpy.types.list.List.join"]], "last() (list method)": [[109, "haskpy.types.list.List.last"]], "length() (list method)": [[109, "haskpy.types.list.List.length"]], "map() (list method)": [[109, "haskpy.types.list.List.map"]], "null() (list method)": [[109, "haskpy.types.list.List.null"]], "pure() (list method)": [[109, "haskpy.types.list.List.pure"]], "replace() (list method)": [[109, "haskpy.types.list.List.replace"]], "sequence() (list method)": [[109, "haskpy.types.list.List.sequence"]], "sum() (list method)": [[109, "haskpy.types.list.List.sum"]], "to_iter() (list method)": [[109, "haskpy.types.list.List.to_iter"]], "traverse() (list method)": [[109, "haskpy.types.list.List.traverse"]], "haskpy.types.maybe": [[110, "module-haskpy.types.maybe"]], "just() (in module haskpy.types.maybe)": [[111, "haskpy.types.maybe.Just"]], "maybe (class in haskpy.types.maybe)": [[112, "haskpy.types.maybe.Maybe"]], "__add__() (maybe method)": [[112, "haskpy.types.maybe.Maybe.__add__"]], "__annotations__ (maybe attribute)": [[112, "haskpy.types.maybe.Maybe.__annotations__"]], "__contains__() (maybe method)": [[112, "haskpy.types.maybe.Maybe.__contains__"]], "__eq__() (maybe method)": [[112, "haskpy.types.maybe.Maybe.__eq__"]], "__eq_test__() (maybe method)": [[112, "haskpy.types.maybe.Maybe.__eq_test__"]], "__hash__() (maybe method)": [[112, "haskpy.types.maybe.Maybe.__hash__"]], "__iter__() (maybe method)": [[112, "haskpy.types.maybe.Maybe.__iter__"]], "__len__() (maybe method)": [[112, "haskpy.types.maybe.Maybe.__len__"]], "__lshift__() (maybe method)": [[112, "haskpy.types.maybe.Maybe.__lshift__"]], "__matmul__() (maybe method)": [[112, "haskpy.types.maybe.Maybe.__matmul__"]], "__mod__() (maybe method)": [[112, "haskpy.types.maybe.Maybe.__mod__"]], "__ne__() (maybe method)": [[112, "haskpy.types.maybe.Maybe.__ne__"]], "__rpow__() (maybe method)": [[112, "haskpy.types.maybe.Maybe.__rpow__"]], "__rshift__() (maybe method)": [[112, "haskpy.types.maybe.Maybe.__rshift__"]], "append() (maybe method)": [[112, "haskpy.types.maybe.Maybe.append"]], "apply() (maybe method)": [[112, "haskpy.types.maybe.Maybe.apply"]], "apply_first() (maybe method)": [[112, "haskpy.types.maybe.Maybe.apply_first"]], "apply_second() (maybe method)": [[112, "haskpy.types.maybe.Maybe.apply_second"]], "apply_to() (maybe method)": [[112, "haskpy.types.maybe.Maybe.apply_to"]], "bind() (maybe method)": [[112, "haskpy.types.maybe.Maybe.bind"]], "elem() (maybe method)": [[112, "haskpy.types.maybe.Maybe.elem"]], "empty (maybe attribute)": [[112, "haskpy.types.maybe.Maybe.empty"]], "flap() (maybe method)": [[112, "haskpy.types.maybe.Maybe.flap"]], "fold() (maybe method)": [[112, "haskpy.types.maybe.Maybe.fold"]], "fold2() (maybe method)": [[112, "haskpy.types.maybe.Maybe.fold2"]], "fold_map() (maybe method)": [[112, "haskpy.types.maybe.Maybe.fold_map"]], "foldl() (maybe method)": [[112, "haskpy.types.maybe.Maybe.foldl"]], "foldr() (maybe method)": [[112, "haskpy.types.maybe.Maybe.foldr"]], "head() (maybe method)": [[112, "haskpy.types.maybe.Maybe.head"]], "join() (maybe method)": [[112, "haskpy.types.maybe.Maybe.join"]], "length() (maybe method)": [[112, "haskpy.types.maybe.Maybe.length"]], "map() (maybe method)": [[112, "haskpy.types.maybe.Maybe.map"]], "null() (maybe method)": [[112, "haskpy.types.maybe.Maybe.null"]], "pure() (maybe method)": [[112, "haskpy.types.maybe.Maybe.pure"]], "replace() (maybe method)": [[112, "haskpy.types.maybe.Maybe.replace"]], "sequence() (maybe method)": [[112, "haskpy.types.maybe.Maybe.sequence"]], "sum() (maybe method)": [[112, "haskpy.types.maybe.Maybe.sum"]], "to_iter() (maybe method)": [[112, "haskpy.types.maybe.Maybe.to_iter"]], "traverse() (maybe method)": [[112, "haskpy.types.maybe.Maybe.traverse"]], "maybet() (in module haskpy.types.maybe)": [[113, "haskpy.types.maybe.MaybeT"]], "nothing (in module haskpy.types.maybe)": [[114, "haskpy.types.maybe.Nothing"]], "haskpy.types.monoids": [[115, "module-haskpy.types.monoids"]], "all (class in haskpy.types.monoids)": [[116, "haskpy.types.monoids.All"]], "__add__() (all method)": [[116, "haskpy.types.monoids.All.__add__"]], "__annotations__ (all attribute)": [[116, "haskpy.types.monoids.All.__annotations__"]], "__eq__() (all method)": [[116, "haskpy.types.monoids.All.__eq__"]], "__hash__() (all method)": [[116, "haskpy.types.monoids.All.__hash__"]], "__ne__() (all method)": [[116, "haskpy.types.monoids.All.__ne__"]], "append() (all method)": [[116, "haskpy.types.monoids.All.append"]], "empty (all attribute)": [[116, "haskpy.types.monoids.All.empty"]], "any (class in haskpy.types.monoids)": [[117, "haskpy.types.monoids.Any"]], "__add__() (any method)": [[117, "haskpy.types.monoids.Any.__add__"]], "__annotations__ (any attribute)": [[117, "haskpy.types.monoids.Any.__annotations__"]], "__eq__() (any method)": [[117, "haskpy.types.monoids.Any.__eq__"]], "__hash__() (any method)": [[117, "haskpy.types.monoids.Any.__hash__"]], "__ne__() (any method)": [[117, "haskpy.types.monoids.Any.__ne__"]], "append() (any method)": [[117, "haskpy.types.monoids.Any.append"]], "empty (any attribute)": [[117, "haskpy.types.monoids.Any.empty"]], "endo (class in haskpy.types.monoids)": [[118, "haskpy.types.monoids.Endo"]], "__add__() (endo method)": [[118, "haskpy.types.monoids.Endo.__add__"]], "__eq_test__() (endo method)": [[118, "haskpy.types.monoids.Endo.__eq_test__"]], "append() (endo method)": [[118, "haskpy.types.monoids.Endo.append"]], "empty (endo attribute)": [[118, "haskpy.types.monoids.Endo.empty"]], "string (class in haskpy.types.monoids)": [[119, "haskpy.types.monoids.String"]], "__add__() (string method)": [[119, "haskpy.types.monoids.String.__add__"]], "__annotations__ (string attribute)": [[119, "haskpy.types.monoids.String.__annotations__"]], "__eq__() (string method)": [[119, "haskpy.types.monoids.String.__eq__"]], "__hash__() (string method)": [[119, "haskpy.types.monoids.String.__hash__"]], "__ne__() (string method)": [[119, "haskpy.types.monoids.String.__ne__"]], "append() (string method)": [[119, "haskpy.types.monoids.String.append"]], "empty (string attribute)": [[119, "haskpy.types.monoids.String.empty"]], "sum (class in haskpy.types.monoids)": [[120, "haskpy.types.monoids.Sum"]], "__add__() (sum method)": [[120, "haskpy.types.monoids.Sum.__add__"]], "__annotations__ (sum attribute)": [[120, "haskpy.types.monoids.Sum.__annotations__"]], "__eq__() (sum method)": [[120, "haskpy.types.monoids.Sum.__eq__"]], "__hash__() (sum method)": [[120, "haskpy.types.monoids.Sum.__hash__"]], "__ne__() (sum method)": [[120, "haskpy.types.monoids.Sum.__ne__"]], "append() (sum method)": [[120, "haskpy.types.monoids.Sum.append"]], "empty (sum attribute)": [[120, "haskpy.types.monoids.Sum.empty"]], "haskpy.types.reader": [[121, "module-haskpy.types.reader"]], "reader (class in haskpy.types.reader)": [[122, "haskpy.types.reader.Reader"]], "readert() (in module haskpy.types.reader)": [[123, "haskpy.types.reader.ReaderT"]], "haskpy.types.state": [[124, "module-haskpy.types.state"]], "state (class in haskpy.types.state)": [[125, "haskpy.types.state.State"]], "statet() (in module haskpy.types.state)": [[126, "haskpy.types.state.StateT"]], "haskpy.types.uncurried": [[127, "module-haskpy.types.uncurried"]], "uncurriedfunction (class in haskpy.types.uncurried)": [[128, "haskpy.types.uncurried.UncurriedFunction"]], "__add__() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.__add__"]], "__attrs_post_init__() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.__attrs_post_init__"]], "__call__() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.__call__"]], "__code__ (uncurriedfunction property)": [[128, "haskpy.types.uncurried.UncurriedFunction.__code__"]], "__eq_test__() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.__eq_test__"]], "__get__() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.__get__"]], "__lshift__() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.__lshift__"]], "__matmul__() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.__matmul__"]], "__mod__() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.__mod__"]], "__pow__() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.__pow__"]], "__rpow__() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.__rpow__"]], "__rshift__() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.__rshift__"]], "__signature__ (uncurriedfunction property)": [[128, "haskpy.types.uncurried.UncurriedFunction.__signature__"]], "append() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.append"]], "apply() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.apply"]], "apply_first() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.apply_first"]], "apply_second() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.apply_second"]], "apply_to() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.apply_to"]], "bind() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.bind"]], "flap() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.flap"]], "join() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.join"]], "map() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.map"]], "pure() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.pure"]], "replace() (uncurriedfunction method)": [[128, "haskpy.types.uncurried.UncurriedFunction.replace"]], "uncurriedfunctionmonoid() (in module haskpy.types.uncurried)": [[129, "haskpy.types.uncurried.UncurriedFunctionMonoid"]], "uncurried() (in module haskpy.types.uncurried)": [[130, "haskpy.types.uncurried.uncurried"]], "haskpy.types.validation": [[131, "module-haskpy.types.validation"]], "validation (class in haskpy.types.validation)": [[132, "haskpy.types.validation.Validation"]], "haskpy.types.writer": [[133, "module-haskpy.types.writer"]], "writer (class in haskpy.types.writer)": [[134, "haskpy.types.writer.Writer"]], "writert() (in module haskpy.types.writer)": [[135, "haskpy.types.writer.WriterT"]], "haskpy.utils": [[136, "module-haskpy.utils"]], "const() (in module haskpy.utils)": [[137, "haskpy.utils.const"]], "identity() (in module haskpy.utils)": [[138, "haskpy.utils.identity"]], "match() (in module haskpy.utils)": [[139, "haskpy.utils.match"]], "haskpy": [[140, "module-haskpy"]]}})